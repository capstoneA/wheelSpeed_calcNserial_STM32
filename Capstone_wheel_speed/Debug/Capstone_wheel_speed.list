
Capstone_wheel_speed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c68  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001d20  08001d20  00002d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d60  08001d60  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d60  08001d60  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d60  08001d60  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d60  08001d60  00002d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001d64  08001d64  00002d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001d68  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08001d74  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08001d74  00003080  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008876  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001761  00000000  00000000  0000b8aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0000d010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f2  00000000  00000000  0000da50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013d60  00000000  00000000  0000e242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000affd  00000000  00000000  00021fa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008078d  00000000  00000000  0002cf9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad72c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024a4  00000000  00000000  000ad770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000afc14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08001d08 	.word	0x08001d08

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08001d08 	.word	0x08001d08

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <timer1setting>:
	queue_rear++;
	if(queue_rear == 20)queue_rear = 0;
	return;
}

void timer1setting(){
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	 *(volatile unsigned int*)(0x40021040) |= 0x01<<11;	//RCC
 800021c:	4b12      	ldr	r3, [pc, #72]	@ (8000268 <timer1setting+0x50>)
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	4b11      	ldr	r3, [pc, #68]	@ (8000268 <timer1setting+0x50>)
 8000222:	2180      	movs	r1, #128	@ 0x80
 8000224:	0109      	lsls	r1, r1, #4
 8000226:	430a      	orrs	r2, r1
 8000228:	601a      	str	r2, [r3, #0]

	 *(volatile unsigned int*)(0x40012C0C) |= 0x01<<0;	//DIER->UIE
 800022a:	4b10      	ldr	r3, [pc, #64]	@ (800026c <timer1setting+0x54>)
 800022c:	681a      	ldr	r2, [r3, #0]
 800022e:	4b0f      	ldr	r3, [pc, #60]	@ (800026c <timer1setting+0x54>)
 8000230:	2101      	movs	r1, #1
 8000232:	430a      	orrs	r2, r1
 8000234:	601a      	str	r2, [r3, #0]
	 *(volatile unsigned int*)(0x40012C10) &= ~(0x01<<0);	//SR - UIF
 8000236:	4b0e      	ldr	r3, [pc, #56]	@ (8000270 <timer1setting+0x58>)
 8000238:	681a      	ldr	r2, [r3, #0]
 800023a:	4b0d      	ldr	r3, [pc, #52]	@ (8000270 <timer1setting+0x58>)
 800023c:	2101      	movs	r1, #1
 800023e:	438a      	bics	r2, r1
 8000240:	601a      	str	r2, [r3, #0]

//	 *(volatile unsigned int*)(0x40012C24);	//CNT
	 *(volatile unsigned int*)(0x40012C28) = 63;	//Prescaler
 8000242:	4b0c      	ldr	r3, [pc, #48]	@ (8000274 <timer1setting+0x5c>)
 8000244:	223f      	movs	r2, #63	@ 0x3f
 8000246:	601a      	str	r2, [r3, #0]
//	 *(volatile unsigned int*)(0x40012C2C);	//ARR

	 *(volatile unsigned int*)(0x40012C00) |= 0x01<<0;	//counter enable
 8000248:	4b0b      	ldr	r3, [pc, #44]	@ (8000278 <timer1setting+0x60>)
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	4b0a      	ldr	r3, [pc, #40]	@ (8000278 <timer1setting+0x60>)
 800024e:	2101      	movs	r1, #1
 8000250:	430a      	orrs	r2, r1
 8000252:	601a      	str	r2, [r3, #0]

	 *(volatile unsigned int*)(0xE000E100) |= 0x01<<13;	//NVIC enable
 8000254:	4b09      	ldr	r3, [pc, #36]	@ (800027c <timer1setting+0x64>)
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	4b08      	ldr	r3, [pc, #32]	@ (800027c <timer1setting+0x64>)
 800025a:	2180      	movs	r1, #128	@ 0x80
 800025c:	0189      	lsls	r1, r1, #6
 800025e:	430a      	orrs	r2, r1
 8000260:	601a      	str	r2, [r3, #0]
}
 8000262:	46c0      	nop			@ (mov r8, r8)
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	40021040 	.word	0x40021040
 800026c:	40012c0c 	.word	0x40012c0c
 8000270:	40012c10 	.word	0x40012c10
 8000274:	40012c28 	.word	0x40012c28
 8000278:	40012c00 	.word	0x40012c00
 800027c:	e000e100 	.word	0xe000e100

08000280 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

void TIM1_BRK_UP_TRG_COM_IRQHandler(){
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	if(*(volatile unsigned int*)(0x40012C10) & (0x01<<0)){
 8000284:	4b14      	ldr	r3, [pc, #80]	@ (80002d8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x58>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	2201      	movs	r2, #1
 800028a:	4013      	ands	r3, r2
 800028c:	d021      	beq.n	80002d2 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x52>
		*(volatile unsigned int*)(0x40012C10) &= ~(0x01<<0);	//SR - UIF
 800028e:	4b12      	ldr	r3, [pc, #72]	@ (80002d8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x58>)
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	4b11      	ldr	r3, [pc, #68]	@ (80002d8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x58>)
 8000294:	2101      	movs	r1, #1
 8000296:	438a      	bics	r2, r1
 8000298:	601a      	str	r2, [r3, #0]

//		*(volatile unsigned int*)(0x40013828) = 97;

		speed = 0;
 800029a:	4b10      	ldr	r3, [pc, #64]	@ (80002dc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x5c>)
 800029c:	2200      	movs	r2, #0
 800029e:	701a      	strb	r2, [r3, #0]
		*(volatile unsigned int*)(0x40013828) = speed;
 80002a0:	4b0e      	ldr	r3, [pc, #56]	@ (80002dc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x5c>)
 80002a2:	781a      	ldrb	r2, [r3, #0]
 80002a4:	4b0e      	ldr	r3, [pc, #56]	@ (80002e0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x60>)
 80002a6:	601a      	str	r2, [r3, #0]

		led_check^=1;
 80002a8:	4b0e      	ldr	r3, [pc, #56]	@ (80002e4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x64>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	2201      	movs	r2, #1
 80002ae:	405a      	eors	r2, r3
 80002b0:	4b0c      	ldr	r3, [pc, #48]	@ (80002e4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x64>)
 80002b2:	601a      	str	r2, [r3, #0]
		if(led_check){
 80002b4:	4b0b      	ldr	r3, [pc, #44]	@ (80002e4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x64>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d003      	beq.n	80002c4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x44>
		  *(volatile unsigned int*)(0x50000018) = 0x01<<(16+4);
 80002bc:	4b0a      	ldr	r3, [pc, #40]	@ (80002e8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x68>)
 80002be:	2280      	movs	r2, #128	@ 0x80
 80002c0:	0352      	lsls	r2, r2, #13
 80002c2:	601a      	str	r2, [r3, #0]
		}
		if(!led_check){
 80002c4:	4b07      	ldr	r3, [pc, #28]	@ (80002e4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x64>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d102      	bne.n	80002d2 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x52>
		  *(volatile unsigned int*)(0x50000018) = 0x01<<(4);
 80002cc:	4b06      	ldr	r3, [pc, #24]	@ (80002e8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x68>)
 80002ce:	2210      	movs	r2, #16
 80002d0:	601a      	str	r2, [r3, #0]
		}
	}
}
 80002d2:	46c0      	nop			@ (mov r8, r8)
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40012c10 	.word	0x40012c10
 80002dc:	20000078 	.word	0x20000078
 80002e0:	40013828 	.word	0x40013828
 80002e4:	20000074 	.word	0x20000074
 80002e8:	50000018 	.word	0x50000018

080002ec <PA8inputSetting>:

void PA8inputSetting(){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	*(volatile unsigned int*)(0x40021034) |= 0x01<<0;			//clock enable
 80002f0:	4b0e      	ldr	r3, [pc, #56]	@ (800032c <PA8inputSetting+0x40>)
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	4b0d      	ldr	r3, [pc, #52]	@ (800032c <PA8inputSetting+0x40>)
 80002f6:	2101      	movs	r1, #1
 80002f8:	430a      	orrs	r2, r1
 80002fa:	601a      	str	r2, [r3, #0]
	*(volatile unsigned int*)(0x50000000) &= ~(0x03<<(8*2));	//input
 80002fc:	23a0      	movs	r3, #160	@ 0xa0
 80002fe:	05db      	lsls	r3, r3, #23
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	23a0      	movs	r3, #160	@ 0xa0
 8000304:	05db      	lsls	r3, r3, #23
 8000306:	490a      	ldr	r1, [pc, #40]	@ (8000330 <PA8inputSetting+0x44>)
 8000308:	400a      	ands	r2, r1
 800030a:	601a      	str	r2, [r3, #0]
    *(volatile unsigned int*)(0x5000000C) &= ~(0x03<<(8*2));	//pupd - not
 800030c:	4b09      	ldr	r3, [pc, #36]	@ (8000334 <PA8inputSetting+0x48>)
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	4b08      	ldr	r3, [pc, #32]	@ (8000334 <PA8inputSetting+0x48>)
 8000312:	4907      	ldr	r1, [pc, #28]	@ (8000330 <PA8inputSetting+0x44>)
 8000314:	400a      	ands	r2, r1
 8000316:	601a      	str	r2, [r3, #0]
    *(volatile unsigned int*)(0x50000008) |= 0x03<<(8*2);		//speed very fast
 8000318:	4b07      	ldr	r3, [pc, #28]	@ (8000338 <PA8inputSetting+0x4c>)
 800031a:	681a      	ldr	r2, [r3, #0]
 800031c:	4b06      	ldr	r3, [pc, #24]	@ (8000338 <PA8inputSetting+0x4c>)
 800031e:	21c0      	movs	r1, #192	@ 0xc0
 8000320:	0289      	lsls	r1, r1, #10
 8000322:	430a      	orrs	r2, r1
 8000324:	601a      	str	r2, [r3, #0]
}
 8000326:	46c0      	nop			@ (mov r8, r8)
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	40021034 	.word	0x40021034
 8000330:	fffcffff 	.word	0xfffcffff
 8000334:	5000000c 	.word	0x5000000c
 8000338:	50000008 	.word	0x50000008

0800033c <EXTI8setting>:

void EXTI8setting(){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	*(volatile unsigned int*)(0x40021800) |= 0x01<<8;	//rising edge trigger
 8000340:	4b0e      	ldr	r3, [pc, #56]	@ (800037c <EXTI8setting+0x40>)
 8000342:	681a      	ldr	r2, [r3, #0]
 8000344:	4b0d      	ldr	r3, [pc, #52]	@ (800037c <EXTI8setting+0x40>)
 8000346:	2180      	movs	r1, #128	@ 0x80
 8000348:	0049      	lsls	r1, r1, #1
 800034a:	430a      	orrs	r2, r1
 800034c:	601a      	str	r2, [r3, #0]
	*(volatile unsigned int*)(0x40021868) &= ~(0xF<<0);	//use PA8
 800034e:	4b0c      	ldr	r3, [pc, #48]	@ (8000380 <EXTI8setting+0x44>)
 8000350:	681a      	ldr	r2, [r3, #0]
 8000352:	4b0b      	ldr	r3, [pc, #44]	@ (8000380 <EXTI8setting+0x44>)
 8000354:	210f      	movs	r1, #15
 8000356:	438a      	bics	r2, r1
 8000358:	601a      	str	r2, [r3, #0]

	*(volatile unsigned int*)(0x40021880) |= 0x01<<8;	//IMR
 800035a:	4b0a      	ldr	r3, [pc, #40]	@ (8000384 <EXTI8setting+0x48>)
 800035c:	681a      	ldr	r2, [r3, #0]
 800035e:	4b09      	ldr	r3, [pc, #36]	@ (8000384 <EXTI8setting+0x48>)
 8000360:	2180      	movs	r1, #128	@ 0x80
 8000362:	0049      	lsls	r1, r1, #1
 8000364:	430a      	orrs	r2, r1
 8000366:	601a      	str	r2, [r3, #0]

	*(volatile unsigned int*)(0xE000E100) |= 0x01<<7;	//EXTI set enable reg
 8000368:	4b07      	ldr	r3, [pc, #28]	@ (8000388 <EXTI8setting+0x4c>)
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <EXTI8setting+0x4c>)
 800036e:	2180      	movs	r1, #128	@ 0x80
 8000370:	430a      	orrs	r2, r1
 8000372:	601a      	str	r2, [r3, #0]
}
 8000374:	46c0      	nop			@ (mov r8, r8)
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	46c0      	nop			@ (mov r8, r8)
 800037c:	40021800 	.word	0x40021800
 8000380:	40021868 	.word	0x40021868
 8000384:	40021880 	.word	0x40021880
 8000388:	e000e100 	.word	0xe000e100

0800038c <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(){
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
	if(*(volatile unsigned int*)(0x4002180C) & (0x01<<8)){
 8000392:	4b1f      	ldr	r3, [pc, #124]	@ (8000410 <EXTI4_15_IRQHandler+0x84>)
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	2380      	movs	r3, #128	@ 0x80
 8000398:	005b      	lsls	r3, r3, #1
 800039a:	4013      	ands	r3, r2
 800039c:	d033      	beq.n	8000406 <EXTI4_15_IRQHandler+0x7a>

//		enqueue(*(volatile unsigned int*)(0x40012C24));
//		*(volatile unsigned int*)(0x40012C24) = 0x00;

		*(volatile unsigned int*)(0x4002180C) |= 0x01<<8;
 800039e:	4b1c      	ldr	r3, [pc, #112]	@ (8000410 <EXTI4_15_IRQHandler+0x84>)
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000410 <EXTI4_15_IRQHandler+0x84>)
 80003a4:	2180      	movs	r1, #128	@ 0x80
 80003a6:	0049      	lsls	r1, r1, #1
 80003a8:	430a      	orrs	r2, r1
 80003aa:	601a      	str	r2, [r3, #0]

//		*(volatile unsigned int*)(0x40013828) = 97;

		unsigned int cnt = *(volatile unsigned int*)(0x40012C24) & 0xFFFF;
 80003ac:	4b19      	ldr	r3, [pc, #100]	@ (8000414 <EXTI4_15_IRQHandler+0x88>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	041b      	lsls	r3, r3, #16
 80003b2:	0c1b      	lsrs	r3, r3, #16
 80003b4:	607b      	str	r3, [r7, #4]
		*(volatile unsigned int*)(0x40012C24) = 0x00;
 80003b6:	4b17      	ldr	r3, [pc, #92]	@ (8000414 <EXTI4_15_IRQHandler+0x88>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
		speed = (unsigned char)(190625/cnt);
 80003bc:	6879      	ldr	r1, [r7, #4]
 80003be:	4816      	ldr	r0, [pc, #88]	@ (8000418 <EXTI4_15_IRQHandler+0x8c>)
 80003c0:	f7ff fe9e 	bl	8000100 <__udivsi3>
 80003c4:	0003      	movs	r3, r0
 80003c6:	b2da      	uxtb	r2, r3
 80003c8:	4b14      	ldr	r3, [pc, #80]	@ (800041c <EXTI4_15_IRQHandler+0x90>)
 80003ca:	701a      	strb	r2, [r3, #0]
		if(speed){
 80003cc:	4b13      	ldr	r3, [pc, #76]	@ (800041c <EXTI4_15_IRQHandler+0x90>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d003      	beq.n	80003dc <EXTI4_15_IRQHandler+0x50>
				//speed update when last speed is not 0
			*(volatile unsigned int*)(0x40013828) = speed;
 80003d4:	4b11      	ldr	r3, [pc, #68]	@ (800041c <EXTI4_15_IRQHandler+0x90>)
 80003d6:	781a      	ldrb	r2, [r3, #0]
 80003d8:	4b11      	ldr	r3, [pc, #68]	@ (8000420 <EXTI4_15_IRQHandler+0x94>)
 80003da:	601a      	str	r2, [r3, #0]
		}

		led_check^=1;
 80003dc:	4b11      	ldr	r3, [pc, #68]	@ (8000424 <EXTI4_15_IRQHandler+0x98>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	2201      	movs	r2, #1
 80003e2:	405a      	eors	r2, r3
 80003e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000424 <EXTI4_15_IRQHandler+0x98>)
 80003e6:	601a      	str	r2, [r3, #0]
		if(led_check){
 80003e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000424 <EXTI4_15_IRQHandler+0x98>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d003      	beq.n	80003f8 <EXTI4_15_IRQHandler+0x6c>
		  *(volatile unsigned int*)(0x50000018) = 0x01<<(16+4);
 80003f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000428 <EXTI4_15_IRQHandler+0x9c>)
 80003f2:	2280      	movs	r2, #128	@ 0x80
 80003f4:	0352      	lsls	r2, r2, #13
 80003f6:	601a      	str	r2, [r3, #0]
		}
		if(!led_check){
 80003f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000424 <EXTI4_15_IRQHandler+0x98>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d102      	bne.n	8000406 <EXTI4_15_IRQHandler+0x7a>
		  *(volatile unsigned int*)(0x50000018) = 0x01<<(4);
 8000400:	4b09      	ldr	r3, [pc, #36]	@ (8000428 <EXTI4_15_IRQHandler+0x9c>)
 8000402:	2210      	movs	r2, #16
 8000404:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000406:	46c0      	nop			@ (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	b002      	add	sp, #8
 800040c:	bd80      	pop	{r7, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)
 8000410:	4002180c 	.word	0x4002180c
 8000414:	40012c24 	.word	0x40012c24
 8000418:	0002e8a1 	.word	0x0002e8a1
 800041c:	20000078 	.word	0x20000078
 8000420:	40013828 	.word	0x40013828
 8000424:	20000074 	.word	0x20000074
 8000428:	50000018 	.word	0x50000018

0800042c <UART1Setting>:

void UART1Setting(){
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	*(volatile unsigned int*)(0x40021040) |= 0x01<<14;	//RCC uart1 enable
 8000430:	4b22      	ldr	r3, [pc, #136]	@ (80004bc <UART1Setting+0x90>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	4b21      	ldr	r3, [pc, #132]	@ (80004bc <UART1Setting+0x90>)
 8000436:	2180      	movs	r1, #128	@ 0x80
 8000438:	01c9      	lsls	r1, r1, #7
 800043a:	430a      	orrs	r2, r1
 800043c:	601a      	str	r2, [r3, #0]
	*(volatile unsigned int*)(0x40021034) |= 0x01<<1;	//RCC GPIOB clock enable
 800043e:	4b20      	ldr	r3, [pc, #128]	@ (80004c0 <UART1Setting+0x94>)
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	4b1f      	ldr	r3, [pc, #124]	@ (80004c0 <UART1Setting+0x94>)
 8000444:	2102      	movs	r1, #2
 8000446:	430a      	orrs	r2, r1
 8000448:	601a      	str	r2, [r3, #0]

	*(volatile unsigned int*)(0x50000400) |= 0x02<<(6*2);	//MODER
 800044a:	4b1e      	ldr	r3, [pc, #120]	@ (80004c4 <UART1Setting+0x98>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	4b1d      	ldr	r3, [pc, #116]	@ (80004c4 <UART1Setting+0x98>)
 8000450:	2180      	movs	r1, #128	@ 0x80
 8000452:	0189      	lsls	r1, r1, #6
 8000454:	430a      	orrs	r2, r1
 8000456:	601a      	str	r2, [r3, #0]
	*(volatile unsigned int*)(0x50000400) &= ~(0x01<<(6*2));	//MODER
 8000458:	4b1a      	ldr	r3, [pc, #104]	@ (80004c4 <UART1Setting+0x98>)
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	4b19      	ldr	r3, [pc, #100]	@ (80004c4 <UART1Setting+0x98>)
 800045e:	491a      	ldr	r1, [pc, #104]	@ (80004c8 <UART1Setting+0x9c>)
 8000460:	400a      	ands	r2, r1
 8000462:	601a      	str	r2, [r3, #0]
	*(volatile unsigned int*)(0x50000400) |= 0x02<<(7*2);	//MODER
 8000464:	4b17      	ldr	r3, [pc, #92]	@ (80004c4 <UART1Setting+0x98>)
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	4b16      	ldr	r3, [pc, #88]	@ (80004c4 <UART1Setting+0x98>)
 800046a:	2180      	movs	r1, #128	@ 0x80
 800046c:	0209      	lsls	r1, r1, #8
 800046e:	430a      	orrs	r2, r1
 8000470:	601a      	str	r2, [r3, #0]
	*(volatile unsigned int*)(0x50000400) &= ~(0x01<<(7*2));	//MODER
 8000472:	4b14      	ldr	r3, [pc, #80]	@ (80004c4 <UART1Setting+0x98>)
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	4b13      	ldr	r3, [pc, #76]	@ (80004c4 <UART1Setting+0x98>)
 8000478:	4914      	ldr	r1, [pc, #80]	@ (80004cc <UART1Setting+0xa0>)
 800047a:	400a      	ands	r2, r1
 800047c:	601a      	str	r2, [r3, #0]

	*(volatile unsigned int*)(0x50000420) &= ~(0x0F<<(7*4));	//AFRL
 800047e:	4b14      	ldr	r3, [pc, #80]	@ (80004d0 <UART1Setting+0xa4>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	4b13      	ldr	r3, [pc, #76]	@ (80004d0 <UART1Setting+0xa4>)
 8000484:	0112      	lsls	r2, r2, #4
 8000486:	0912      	lsrs	r2, r2, #4
 8000488:	601a      	str	r2, [r3, #0]
	*(volatile unsigned int*)(0x50000420) &= ~(0x0F<<(6*4));	//AFRL
 800048a:	4b11      	ldr	r3, [pc, #68]	@ (80004d0 <UART1Setting+0xa4>)
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	4b10      	ldr	r3, [pc, #64]	@ (80004d0 <UART1Setting+0xa4>)
 8000490:	4910      	ldr	r1, [pc, #64]	@ (80004d4 <UART1Setting+0xa8>)
 8000492:	400a      	ands	r2, r1
 8000494:	601a      	str	r2, [r3, #0]

	*(volatile unsigned int*)(0x4001380C) = 1667;	//baud rate : 16000000/9600
 8000496:	4b10      	ldr	r3, [pc, #64]	@ (80004d8 <UART1Setting+0xac>)
 8000498:	4a10      	ldr	r2, [pc, #64]	@ (80004dc <UART1Setting+0xb0>)
 800049a:	601a      	str	r2, [r3, #0]
	*(volatile unsigned int*)(0x40013800) |= 0x01<<0;	//UART Enable
 800049c:	4b10      	ldr	r3, [pc, #64]	@ (80004e0 <UART1Setting+0xb4>)
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	4b0f      	ldr	r3, [pc, #60]	@ (80004e0 <UART1Setting+0xb4>)
 80004a2:	2101      	movs	r1, #1
 80004a4:	430a      	orrs	r2, r1
 80004a6:	601a      	str	r2, [r3, #0]
	*(volatile unsigned int*)(0x40013800) |= 0x01<<3;	//UART Transmitter Enable
 80004a8:	4b0d      	ldr	r3, [pc, #52]	@ (80004e0 <UART1Setting+0xb4>)
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <UART1Setting+0xb4>)
 80004ae:	2108      	movs	r1, #8
 80004b0:	430a      	orrs	r2, r1
 80004b2:	601a      	str	r2, [r3, #0]
}
 80004b4:	46c0      	nop			@ (mov r8, r8)
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)
 80004bc:	40021040 	.word	0x40021040
 80004c0:	40021034 	.word	0x40021034
 80004c4:	50000400 	.word	0x50000400
 80004c8:	ffffefff 	.word	0xffffefff
 80004cc:	ffffbfff 	.word	0xffffbfff
 80004d0:	50000420 	.word	0x50000420
 80004d4:	f0ffffff 	.word	0xf0ffffff
 80004d8:	4001380c 	.word	0x4001380c
 80004dc:	00000683 	.word	0x00000683
 80004e0:	40013800 	.word	0x40013800

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 f9c4 	bl	8000874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f83a 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f8dc 	bl	80006ac <MX_GPIO_Init>
  MX_TIM1_Init();
 80004f4:	f000 f87e 	bl	80005f4 <MX_TIM1_Init>

  //190625
  /* USER CODE BEGIN 2 */

  *(volatile unsigned int*)(0x40021034) |= 0x01<<0;			//PA Clock Enable
 80004f8:	4b16      	ldr	r3, [pc, #88]	@ (8000554 <main+0x70>)
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	4b15      	ldr	r3, [pc, #84]	@ (8000554 <main+0x70>)
 80004fe:	2101      	movs	r1, #1
 8000500:	430a      	orrs	r2, r1
 8000502:	601a      	str	r2, [r3, #0]
  *(volatile unsigned int*)(0x50000000) |= (0x01)<<(4*2);	//MODER
 8000504:	23a0      	movs	r3, #160	@ 0xa0
 8000506:	05db      	lsls	r3, r3, #23
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	23a0      	movs	r3, #160	@ 0xa0
 800050c:	05db      	lsls	r3, r3, #23
 800050e:	2180      	movs	r1, #128	@ 0x80
 8000510:	0049      	lsls	r1, r1, #1
 8000512:	430a      	orrs	r2, r1
 8000514:	601a      	str	r2, [r3, #0]
  *(volatile unsigned int*)(0x50000000) &= ~(0x02)<<(4*2);	//MODER
 8000516:	23a0      	movs	r3, #160	@ 0xa0
 8000518:	05db      	lsls	r3, r3, #23
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	23a0      	movs	r3, #160	@ 0xa0
 800051e:	05db      	lsls	r3, r3, #23
 8000520:	490d      	ldr	r1, [pc, #52]	@ (8000558 <main+0x74>)
 8000522:	400a      	ands	r2, r1
 8000524:	601a      	str	r2, [r3, #0]
  *(volatile unsigned int*)(0x50000008) |= (0x03)<<(4*2);	//speed - very fast
 8000526:	4b0d      	ldr	r3, [pc, #52]	@ (800055c <main+0x78>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <main+0x78>)
 800052c:	21c0      	movs	r1, #192	@ 0xc0
 800052e:	0089      	lsls	r1, r1, #2
 8000530:	430a      	orrs	r2, r1
 8000532:	601a      	str	r2, [r3, #0]
  *(volatile unsigned int*)(0x5000000C) &= ~(0x03)<<(4*2);	//pupd - not
 8000534:	4b0a      	ldr	r3, [pc, #40]	@ (8000560 <main+0x7c>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b09      	ldr	r3, [pc, #36]	@ (8000560 <main+0x7c>)
 800053a:	0a92      	lsrs	r2, r2, #10
 800053c:	0292      	lsls	r2, r2, #10
 800053e:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  PA8inputSetting();
 8000540:	f7ff fed4 	bl	80002ec <PA8inputSetting>
  EXTI8setting();
 8000544:	f7ff fefa 	bl	800033c <EXTI8setting>
  timer1setting();
 8000548:	f7ff fe66 	bl	8000218 <timer1setting>
  UART1Setting();
 800054c:	f7ff ff6e 	bl	800042c <UART1Setting>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000550:	46c0      	nop			@ (mov r8, r8)
 8000552:	e7fd      	b.n	8000550 <main+0x6c>
 8000554:	40021034 	.word	0x40021034
 8000558:	fffffd00 	.word	0xfffffd00
 800055c:	50000008 	.word	0x50000008
 8000560:	5000000c 	.word	0x5000000c

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b590      	push	{r4, r7, lr}
 8000566:	b093      	sub	sp, #76	@ 0x4c
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	2414      	movs	r4, #20
 800056c:	193b      	adds	r3, r7, r4
 800056e:	0018      	movs	r0, r3
 8000570:	2334      	movs	r3, #52	@ 0x34
 8000572:	001a      	movs	r2, r3
 8000574:	2100      	movs	r1, #0
 8000576:	f001 fb9b 	bl	8001cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	0018      	movs	r0, r3
 800057e:	2310      	movs	r3, #16
 8000580:	001a      	movs	r2, r3
 8000582:	2100      	movs	r1, #0
 8000584:	f001 fb94 	bl	8001cb0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	2380      	movs	r3, #128	@ 0x80
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	0018      	movs	r0, r3
 800058e:	f000 fc0f 	bl	8000db0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000592:	193b      	adds	r3, r7, r4
 8000594:	2202      	movs	r2, #2
 8000596:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000598:	193b      	adds	r3, r7, r4
 800059a:	2280      	movs	r2, #128	@ 0x80
 800059c:	0052      	lsls	r2, r2, #1
 800059e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005a0:	193b      	adds	r3, r7, r4
 80005a2:	2200      	movs	r2, #0
 80005a4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	2240      	movs	r2, #64	@ 0x40
 80005aa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	2200      	movs	r2, #0
 80005b0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	0018      	movs	r0, r3
 80005b6:	f000 fc3b 	bl	8000e30 <HAL_RCC_OscConfig>
 80005ba:	1e03      	subs	r3, r0, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80005be:	f000 f8c7 	bl	8000750 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2207      	movs	r2, #7
 80005c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2200      	movs	r2, #0
 80005cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2100      	movs	r1, #0
 80005de:	0018      	movs	r0, r3
 80005e0:	f000 ff36 	bl	8001450 <HAL_RCC_ClockConfig>
 80005e4:	1e03      	subs	r3, r0, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x88>
  {
    Error_Handler();
 80005e8:	f000 f8b2 	bl	8000750 <Error_Handler>
  }
}
 80005ec:	46c0      	nop			@ (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	b013      	add	sp, #76	@ 0x4c
 80005f2:	bd90      	pop	{r4, r7, pc}

080005f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005fa:	2310      	movs	r3, #16
 80005fc:	18fb      	adds	r3, r7, r3
 80005fe:	0018      	movs	r0, r3
 8000600:	2310      	movs	r3, #16
 8000602:	001a      	movs	r2, r3
 8000604:	2100      	movs	r1, #0
 8000606:	f001 fb53 	bl	8001cb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	0018      	movs	r0, r3
 800060e:	230c      	movs	r3, #12
 8000610:	001a      	movs	r2, r3
 8000612:	2100      	movs	r1, #0
 8000614:	f001 fb4c 	bl	8001cb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000618:	4b21      	ldr	r3, [pc, #132]	@ (80006a0 <MX_TIM1_Init+0xac>)
 800061a:	4a22      	ldr	r2, [pc, #136]	@ (80006a4 <MX_TIM1_Init+0xb0>)
 800061c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800061e:	4b20      	ldr	r3, [pc, #128]	@ (80006a0 <MX_TIM1_Init+0xac>)
 8000620:	2200      	movs	r2, #0
 8000622:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000624:	4b1e      	ldr	r3, [pc, #120]	@ (80006a0 <MX_TIM1_Init+0xac>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800062a:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <MX_TIM1_Init+0xac>)
 800062c:	4a1e      	ldr	r2, [pc, #120]	@ (80006a8 <MX_TIM1_Init+0xb4>)
 800062e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <MX_TIM1_Init+0xac>)
 8000632:	2200      	movs	r2, #0
 8000634:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000636:	4b1a      	ldr	r3, [pc, #104]	@ (80006a0 <MX_TIM1_Init+0xac>)
 8000638:	2200      	movs	r2, #0
 800063a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800063c:	4b18      	ldr	r3, [pc, #96]	@ (80006a0 <MX_TIM1_Init+0xac>)
 800063e:	2200      	movs	r2, #0
 8000640:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000642:	4b17      	ldr	r3, [pc, #92]	@ (80006a0 <MX_TIM1_Init+0xac>)
 8000644:	0018      	movs	r0, r3
 8000646:	f001 f88d 	bl	8001764 <HAL_TIM_Base_Init>
 800064a:	1e03      	subs	r3, r0, #0
 800064c:	d001      	beq.n	8000652 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800064e:	f000 f87f 	bl	8000750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000652:	2110      	movs	r1, #16
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2280      	movs	r2, #128	@ 0x80
 8000658:	0152      	lsls	r2, r2, #5
 800065a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800065c:	187a      	adds	r2, r7, r1
 800065e:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <MX_TIM1_Init+0xac>)
 8000660:	0011      	movs	r1, r2
 8000662:	0018      	movs	r0, r3
 8000664:	f001 f8d6 	bl	8001814 <HAL_TIM_ConfigClockSource>
 8000668:	1e03      	subs	r3, r0, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800066c:	f000 f870 	bl	8000750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2200      	movs	r2, #0
 800067a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000682:	1d3a      	adds	r2, r7, #4
 8000684:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <MX_TIM1_Init+0xac>)
 8000686:	0011      	movs	r1, r2
 8000688:	0018      	movs	r0, r3
 800068a:	f001 faaf 	bl	8001bec <HAL_TIMEx_MasterConfigSynchronization>
 800068e:	1e03      	subs	r3, r0, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000692:	f000 f85d 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	b008      	add	sp, #32
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			@ (mov r8, r8)
 80006a0:	20000028 	.word	0x20000028
 80006a4:	40012c00 	.word	0x40012c00
 80006a8:	0000ffff 	.word	0x0000ffff

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b089      	sub	sp, #36	@ 0x24
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	240c      	movs	r4, #12
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	0018      	movs	r0, r3
 80006b8:	2314      	movs	r3, #20
 80006ba:	001a      	movs	r2, r3
 80006bc:	2100      	movs	r1, #0
 80006be:	f001 faf7 	bl	8001cb0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	4b20      	ldr	r3, [pc, #128]	@ (8000744 <MX_GPIO_Init+0x98>)
 80006c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000744 <MX_GPIO_Init+0x98>)
 80006c8:	2102      	movs	r1, #2
 80006ca:	430a      	orrs	r2, r1
 80006cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000744 <MX_GPIO_Init+0x98>)
 80006d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006d2:	2202      	movs	r2, #2
 80006d4:	4013      	ands	r3, r2
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	4b1a      	ldr	r3, [pc, #104]	@ (8000744 <MX_GPIO_Init+0x98>)
 80006dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006de:	4b19      	ldr	r3, [pc, #100]	@ (8000744 <MX_GPIO_Init+0x98>)
 80006e0:	2101      	movs	r1, #1
 80006e2:	430a      	orrs	r2, r1
 80006e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80006e6:	4b17      	ldr	r3, [pc, #92]	@ (8000744 <MX_GPIO_Init+0x98>)
 80006e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006ea:	2201      	movs	r2, #1
 80006ec:	4013      	ands	r3, r2
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB7 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80006f2:	0021      	movs	r1, r4
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	22c0      	movs	r2, #192	@ 0xc0
 80006f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2202      	movs	r2, #2
 80006fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2203      	movs	r2, #3
 800070a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000712:	187b      	adds	r3, r7, r1
 8000714:	4a0c      	ldr	r2, [pc, #48]	@ (8000748 <MX_GPIO_Init+0x9c>)
 8000716:	0019      	movs	r1, r3
 8000718:	0010      	movs	r0, r2
 800071a:	f000 f9e5 	bl	8000ae8 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <MX_GPIO_Init+0xa0>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <MX_GPIO_Init+0xa0>)
 8000724:	2180      	movs	r1, #128	@ 0x80
 8000726:	0289      	lsls	r1, r1, #10
 8000728:	430a      	orrs	r2, r1
 800072a:	601a      	str	r2, [r3, #0]

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 800072c:	4b07      	ldr	r3, [pc, #28]	@ (800074c <MX_GPIO_Init+0xa0>)
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_GPIO_Init+0xa0>)
 8000732:	2180      	movs	r1, #128	@ 0x80
 8000734:	0249      	lsls	r1, r1, #9
 8000736:	430a      	orrs	r2, r1
 8000738:	601a      	str	r2, [r3, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b009      	add	sp, #36	@ 0x24
 8000740:	bd90      	pop	{r4, r7, pc}
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	40021000 	.word	0x40021000
 8000748:	50000400 	.word	0x50000400
 800074c:	40010000 	.word	0x40010000

08000750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000754:	b672      	cpsid	i
}
 8000756:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000758:	46c0      	nop			@ (mov r8, r8)
 800075a:	e7fd      	b.n	8000758 <Error_Handler+0x8>

0800075c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000762:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <HAL_MspInit+0x44>)
 8000764:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <HAL_MspInit+0x44>)
 8000768:	2101      	movs	r1, #1
 800076a:	430a      	orrs	r2, r1
 800076c:	641a      	str	r2, [r3, #64]	@ 0x40
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <HAL_MspInit+0x44>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000772:	2201      	movs	r2, #1
 8000774:	4013      	ands	r3, r2
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <HAL_MspInit+0x44>)
 800077c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800077e:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <HAL_MspInit+0x44>)
 8000780:	2180      	movs	r1, #128	@ 0x80
 8000782:	0549      	lsls	r1, r1, #21
 8000784:	430a      	orrs	r2, r1
 8000786:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000788:	4b05      	ldr	r3, [pc, #20]	@ (80007a0 <HAL_MspInit+0x44>)
 800078a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800078c:	2380      	movs	r3, #128	@ 0x80
 800078e:	055b      	lsls	r3, r3, #21
 8000790:	4013      	ands	r3, r2
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	46c0      	nop			@ (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	b002      	add	sp, #8
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	40021000 	.word	0x40021000

080007a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a0a      	ldr	r2, [pc, #40]	@ (80007dc <HAL_TIM_Base_MspInit+0x38>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d10d      	bne.n	80007d2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007b6:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <HAL_TIM_Base_MspInit+0x3c>)
 80007b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007ba:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <HAL_TIM_Base_MspInit+0x3c>)
 80007bc:	2180      	movs	r1, #128	@ 0x80
 80007be:	0109      	lsls	r1, r1, #4
 80007c0:	430a      	orrs	r2, r1
 80007c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <HAL_TIM_Base_MspInit+0x3c>)
 80007c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007c8:	2380      	movs	r3, #128	@ 0x80
 80007ca:	011b      	lsls	r3, r3, #4
 80007cc:	4013      	ands	r3, r2
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b004      	add	sp, #16
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	40012c00 	.word	0x40012c00
 80007e0:	40021000 	.word	0x40021000

080007e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007e8:	46c0      	nop			@ (mov r8, r8)
 80007ea:	e7fd      	b.n	80007e8 <NMI_Handler+0x4>

080007ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	e7fd      	b.n	80007f0 <HardFault_Handler+0x4>

080007f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007f8:	46c0      	nop			@ (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080c:	f000 f89c 	bl	8000948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000810:	46c0      	nop			@ (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800081a:	46c0      	nop			@ (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000820:	480d      	ldr	r0, [pc, #52]	@ (8000858 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000822:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000824:	f7ff fff7 	bl	8000816 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000828:	480c      	ldr	r0, [pc, #48]	@ (800085c <LoopForever+0x6>)
  ldr r1, =_edata
 800082a:	490d      	ldr	r1, [pc, #52]	@ (8000860 <LoopForever+0xa>)
  ldr r2, =_sidata
 800082c:	4a0d      	ldr	r2, [pc, #52]	@ (8000864 <LoopForever+0xe>)
  movs r3, #0
 800082e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000830:	e002      	b.n	8000838 <LoopCopyDataInit>

08000832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000836:	3304      	adds	r3, #4

08000838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800083c:	d3f9      	bcc.n	8000832 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083e:	4a0a      	ldr	r2, [pc, #40]	@ (8000868 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000840:	4c0a      	ldr	r4, [pc, #40]	@ (800086c <LoopForever+0x16>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000844:	e001      	b.n	800084a <LoopFillZerobss>

08000846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000848:	3204      	adds	r2, #4

0800084a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800084c:	d3fb      	bcc.n	8000846 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800084e:	f001 fa37 	bl	8001cc0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000852:	f7ff fe47 	bl	80004e4 <main>

08000856 <LoopForever>:

LoopForever:
  b LoopForever
 8000856:	e7fe      	b.n	8000856 <LoopForever>
  ldr   r0, =_estack
 8000858:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800085c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000860:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000864:	08001d68 	.word	0x08001d68
  ldr r2, =_sbss
 8000868:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800086c:	20000080 	.word	0x20000080

08000870 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000870:	e7fe      	b.n	8000870 <ADC1_IRQHandler>
	...

08000874 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000880:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <HAL_Init+0x3c>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	4b0a      	ldr	r3, [pc, #40]	@ (80008b0 <HAL_Init+0x3c>)
 8000886:	2180      	movs	r1, #128	@ 0x80
 8000888:	0049      	lsls	r1, r1, #1
 800088a:	430a      	orrs	r2, r1
 800088c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800088e:	2003      	movs	r0, #3
 8000890:	f000 f810 	bl	80008b4 <HAL_InitTick>
 8000894:	1e03      	subs	r3, r0, #0
 8000896:	d003      	beq.n	80008a0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000898:	1dfb      	adds	r3, r7, #7
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
 800089e:	e001      	b.n	80008a4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80008a0:	f7ff ff5c 	bl	800075c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008a4:	1dfb      	adds	r3, r7, #7
 80008a6:	781b      	ldrb	r3, [r3, #0]
}
 80008a8:	0018      	movs	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b002      	add	sp, #8
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40022000 	.word	0x40022000

080008b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b4:	b590      	push	{r4, r7, lr}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008bc:	230f      	movs	r3, #15
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80008c4:	4b1d      	ldr	r3, [pc, #116]	@ (800093c <HAL_InitTick+0x88>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d02b      	beq.n	8000924 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80008cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000940 <HAL_InitTick+0x8c>)
 80008ce:	681c      	ldr	r4, [r3, #0]
 80008d0:	4b1a      	ldr	r3, [pc, #104]	@ (800093c <HAL_InitTick+0x88>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	0019      	movs	r1, r3
 80008d6:	23fa      	movs	r3, #250	@ 0xfa
 80008d8:	0098      	lsls	r0, r3, #2
 80008da:	f7ff fc11 	bl	8000100 <__udivsi3>
 80008de:	0003      	movs	r3, r0
 80008e0:	0019      	movs	r1, r3
 80008e2:	0020      	movs	r0, r4
 80008e4:	f7ff fc0c 	bl	8000100 <__udivsi3>
 80008e8:	0003      	movs	r3, r0
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 f8ef 	bl	8000ace <HAL_SYSTICK_Config>
 80008f0:	1e03      	subs	r3, r0, #0
 80008f2:	d112      	bne.n	800091a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b03      	cmp	r3, #3
 80008f8:	d80a      	bhi.n	8000910 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008fa:	6879      	ldr	r1, [r7, #4]
 80008fc:	2301      	movs	r3, #1
 80008fe:	425b      	negs	r3, r3
 8000900:	2200      	movs	r2, #0
 8000902:	0018      	movs	r0, r3
 8000904:	f000 f8ce 	bl	8000aa4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000908:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <HAL_InitTick+0x90>)
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	e00d      	b.n	800092c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000910:	230f      	movs	r3, #15
 8000912:	18fb      	adds	r3, r7, r3
 8000914:	2201      	movs	r2, #1
 8000916:	701a      	strb	r2, [r3, #0]
 8000918:	e008      	b.n	800092c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800091a:	230f      	movs	r3, #15
 800091c:	18fb      	adds	r3, r7, r3
 800091e:	2201      	movs	r2, #1
 8000920:	701a      	strb	r2, [r3, #0]
 8000922:	e003      	b.n	800092c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000924:	230f      	movs	r3, #15
 8000926:	18fb      	adds	r3, r7, r3
 8000928:	2201      	movs	r2, #1
 800092a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800092c:	230f      	movs	r3, #15
 800092e:	18fb      	adds	r3, r7, r3
 8000930:	781b      	ldrb	r3, [r3, #0]
}
 8000932:	0018      	movs	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	b005      	add	sp, #20
 8000938:	bd90      	pop	{r4, r7, pc}
 800093a:	46c0      	nop			@ (mov r8, r8)
 800093c:	20000008 	.word	0x20000008
 8000940:	20000000 	.word	0x20000000
 8000944:	20000004 	.word	0x20000004

08000948 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800094c:	4b05      	ldr	r3, [pc, #20]	@ (8000964 <HAL_IncTick+0x1c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	001a      	movs	r2, r3
 8000952:	4b05      	ldr	r3, [pc, #20]	@ (8000968 <HAL_IncTick+0x20>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	18d2      	adds	r2, r2, r3
 8000958:	4b03      	ldr	r3, [pc, #12]	@ (8000968 <HAL_IncTick+0x20>)
 800095a:	601a      	str	r2, [r3, #0]
}
 800095c:	46c0      	nop			@ (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	20000008 	.word	0x20000008
 8000968:	2000007c 	.word	0x2000007c

0800096c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  return uwTick;
 8000970:	4b02      	ldr	r3, [pc, #8]	@ (800097c <HAL_GetTick+0x10>)
 8000972:	681b      	ldr	r3, [r3, #0]
}
 8000974:	0018      	movs	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			@ (mov r8, r8)
 800097c:	2000007c 	.word	0x2000007c

08000980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	0002      	movs	r2, r0
 8000988:	6039      	str	r1, [r7, #0]
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800098e:	1dfb      	adds	r3, r7, #7
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b7f      	cmp	r3, #127	@ 0x7f
 8000994:	d828      	bhi.n	80009e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000996:	4a2f      	ldr	r2, [pc, #188]	@ (8000a54 <__NVIC_SetPriority+0xd4>)
 8000998:	1dfb      	adds	r3, r7, #7
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	b25b      	sxtb	r3, r3
 800099e:	089b      	lsrs	r3, r3, #2
 80009a0:	33c0      	adds	r3, #192	@ 0xc0
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	589b      	ldr	r3, [r3, r2]
 80009a6:	1dfa      	adds	r2, r7, #7
 80009a8:	7812      	ldrb	r2, [r2, #0]
 80009aa:	0011      	movs	r1, r2
 80009ac:	2203      	movs	r2, #3
 80009ae:	400a      	ands	r2, r1
 80009b0:	00d2      	lsls	r2, r2, #3
 80009b2:	21ff      	movs	r1, #255	@ 0xff
 80009b4:	4091      	lsls	r1, r2
 80009b6:	000a      	movs	r2, r1
 80009b8:	43d2      	mvns	r2, r2
 80009ba:	401a      	ands	r2, r3
 80009bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	019b      	lsls	r3, r3, #6
 80009c2:	22ff      	movs	r2, #255	@ 0xff
 80009c4:	401a      	ands	r2, r3
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	0018      	movs	r0, r3
 80009cc:	2303      	movs	r3, #3
 80009ce:	4003      	ands	r3, r0
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009d4:	481f      	ldr	r0, [pc, #124]	@ (8000a54 <__NVIC_SetPriority+0xd4>)
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	b25b      	sxtb	r3, r3
 80009dc:	089b      	lsrs	r3, r3, #2
 80009de:	430a      	orrs	r2, r1
 80009e0:	33c0      	adds	r3, #192	@ 0xc0
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009e6:	e031      	b.n	8000a4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a58 <__NVIC_SetPriority+0xd8>)
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	0019      	movs	r1, r3
 80009f0:	230f      	movs	r3, #15
 80009f2:	400b      	ands	r3, r1
 80009f4:	3b08      	subs	r3, #8
 80009f6:	089b      	lsrs	r3, r3, #2
 80009f8:	3306      	adds	r3, #6
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	18d3      	adds	r3, r2, r3
 80009fe:	3304      	adds	r3, #4
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	1dfa      	adds	r2, r7, #7
 8000a04:	7812      	ldrb	r2, [r2, #0]
 8000a06:	0011      	movs	r1, r2
 8000a08:	2203      	movs	r2, #3
 8000a0a:	400a      	ands	r2, r1
 8000a0c:	00d2      	lsls	r2, r2, #3
 8000a0e:	21ff      	movs	r1, #255	@ 0xff
 8000a10:	4091      	lsls	r1, r2
 8000a12:	000a      	movs	r2, r1
 8000a14:	43d2      	mvns	r2, r2
 8000a16:	401a      	ands	r2, r3
 8000a18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	019b      	lsls	r3, r3, #6
 8000a1e:	22ff      	movs	r2, #255	@ 0xff
 8000a20:	401a      	ands	r2, r3
 8000a22:	1dfb      	adds	r3, r7, #7
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	0018      	movs	r0, r3
 8000a28:	2303      	movs	r3, #3
 8000a2a:	4003      	ands	r3, r0
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a30:	4809      	ldr	r0, [pc, #36]	@ (8000a58 <__NVIC_SetPriority+0xd8>)
 8000a32:	1dfb      	adds	r3, r7, #7
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	001c      	movs	r4, r3
 8000a38:	230f      	movs	r3, #15
 8000a3a:	4023      	ands	r3, r4
 8000a3c:	3b08      	subs	r3, #8
 8000a3e:	089b      	lsrs	r3, r3, #2
 8000a40:	430a      	orrs	r2, r1
 8000a42:	3306      	adds	r3, #6
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	18c3      	adds	r3, r0, r3
 8000a48:	3304      	adds	r3, #4
 8000a4a:	601a      	str	r2, [r3, #0]
}
 8000a4c:	46c0      	nop			@ (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b003      	add	sp, #12
 8000a52:	bd90      	pop	{r4, r7, pc}
 8000a54:	e000e100 	.word	0xe000e100
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	1e5a      	subs	r2, r3, #1
 8000a68:	2380      	movs	r3, #128	@ 0x80
 8000a6a:	045b      	lsls	r3, r3, #17
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d301      	bcc.n	8000a74 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a70:	2301      	movs	r3, #1
 8000a72:	e010      	b.n	8000a96 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a74:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <SysTick_Config+0x44>)
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	3a01      	subs	r2, #1
 8000a7a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	425b      	negs	r3, r3
 8000a80:	2103      	movs	r1, #3
 8000a82:	0018      	movs	r0, r3
 8000a84:	f7ff ff7c 	bl	8000980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a88:	4b05      	ldr	r3, [pc, #20]	@ (8000aa0 <SysTick_Config+0x44>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8e:	4b04      	ldr	r3, [pc, #16]	@ (8000aa0 <SysTick_Config+0x44>)
 8000a90:	2207      	movs	r2, #7
 8000a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	0018      	movs	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b002      	add	sp, #8
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			@ (mov r8, r8)
 8000aa0:	e000e010 	.word	0xe000e010

08000aa4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
 8000aae:	210f      	movs	r1, #15
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	1c02      	adds	r2, r0, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	b25b      	sxtb	r3, r3
 8000abe:	0011      	movs	r1, r2
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f7ff ff5d 	bl	8000980 <__NVIC_SetPriority>
}
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b004      	add	sp, #16
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f7ff ffbf 	bl	8000a5c <SysTick_Config>
 8000ade:	0003      	movs	r3, r0
}
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b002      	add	sp, #8
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af6:	e147      	b.n	8000d88 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2101      	movs	r1, #1
 8000afe:	697a      	ldr	r2, [r7, #20]
 8000b00:	4091      	lsls	r1, r2
 8000b02:	000a      	movs	r2, r1
 8000b04:	4013      	ands	r3, r2
 8000b06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d100      	bne.n	8000b10 <HAL_GPIO_Init+0x28>
 8000b0e:	e138      	b.n	8000d82 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	2203      	movs	r2, #3
 8000b16:	4013      	ands	r3, r2
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d005      	beq.n	8000b28 <HAL_GPIO_Init+0x40>
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	2203      	movs	r2, #3
 8000b22:	4013      	ands	r3, r2
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d130      	bne.n	8000b8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	2203      	movs	r2, #3
 8000b34:	409a      	lsls	r2, r3
 8000b36:	0013      	movs	r3, r2
 8000b38:	43da      	mvns	r2, r3
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	68da      	ldr	r2, [r3, #12]
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	409a      	lsls	r2, r3
 8000b4a:	0013      	movs	r3, r2
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b5e:	2201      	movs	r2, #1
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	409a      	lsls	r2, r3
 8000b64:	0013      	movs	r3, r2
 8000b66:	43da      	mvns	r2, r3
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	091b      	lsrs	r3, r3, #4
 8000b74:	2201      	movs	r2, #1
 8000b76:	401a      	ands	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	409a      	lsls	r2, r3
 8000b7c:	0013      	movs	r3, r2
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	2203      	movs	r2, #3
 8000b90:	4013      	ands	r3, r2
 8000b92:	2b03      	cmp	r3, #3
 8000b94:	d017      	beq.n	8000bc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	68db      	ldr	r3, [r3, #12]
 8000b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	409a      	lsls	r2, r3
 8000ba4:	0013      	movs	r3, r2
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	409a      	lsls	r2, r3
 8000bb8:	0013      	movs	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2203      	movs	r2, #3
 8000bcc:	4013      	ands	r3, r2
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d123      	bne.n	8000c1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	08da      	lsrs	r2, r3, #3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	3208      	adds	r2, #8
 8000bda:	0092      	lsls	r2, r2, #2
 8000bdc:	58d3      	ldr	r3, [r2, r3]
 8000bde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	2207      	movs	r2, #7
 8000be4:	4013      	ands	r3, r2
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	220f      	movs	r2, #15
 8000bea:	409a      	lsls	r2, r3
 8000bec:	0013      	movs	r3, r2
 8000bee:	43da      	mvns	r2, r3
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	691a      	ldr	r2, [r3, #16]
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	2107      	movs	r1, #7
 8000bfe:	400b      	ands	r3, r1
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	409a      	lsls	r2, r3
 8000c04:	0013      	movs	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	08da      	lsrs	r2, r3, #3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3208      	adds	r2, #8
 8000c14:	0092      	lsls	r2, r2, #2
 8000c16:	6939      	ldr	r1, [r7, #16]
 8000c18:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	2203      	movs	r2, #3
 8000c26:	409a      	lsls	r2, r3
 8000c28:	0013      	movs	r3, r2
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	2203      	movs	r2, #3
 8000c38:	401a      	ands	r2, r3
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	409a      	lsls	r2, r3
 8000c40:	0013      	movs	r3, r2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	23c0      	movs	r3, #192	@ 0xc0
 8000c54:	029b      	lsls	r3, r3, #10
 8000c56:	4013      	ands	r3, r2
 8000c58:	d100      	bne.n	8000c5c <HAL_GPIO_Init+0x174>
 8000c5a:	e092      	b.n	8000d82 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000c5c:	4a50      	ldr	r2, [pc, #320]	@ (8000da0 <HAL_GPIO_Init+0x2b8>)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	089b      	lsrs	r3, r3, #2
 8000c62:	3318      	adds	r3, #24
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	589b      	ldr	r3, [r3, r2]
 8000c68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	4013      	ands	r3, r2
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	220f      	movs	r2, #15
 8000c74:	409a      	lsls	r2, r3
 8000c76:	0013      	movs	r3, r2
 8000c78:	43da      	mvns	r2, r3
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	23a0      	movs	r3, #160	@ 0xa0
 8000c84:	05db      	lsls	r3, r3, #23
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d013      	beq.n	8000cb2 <HAL_GPIO_Init+0x1ca>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a45      	ldr	r2, [pc, #276]	@ (8000da4 <HAL_GPIO_Init+0x2bc>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d00d      	beq.n	8000cae <HAL_GPIO_Init+0x1c6>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a44      	ldr	r2, [pc, #272]	@ (8000da8 <HAL_GPIO_Init+0x2c0>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d007      	beq.n	8000caa <HAL_GPIO_Init+0x1c2>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a43      	ldr	r2, [pc, #268]	@ (8000dac <HAL_GPIO_Init+0x2c4>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d101      	bne.n	8000ca6 <HAL_GPIO_Init+0x1be>
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	e006      	b.n	8000cb4 <HAL_GPIO_Init+0x1cc>
 8000ca6:	2305      	movs	r3, #5
 8000ca8:	e004      	b.n	8000cb4 <HAL_GPIO_Init+0x1cc>
 8000caa:	2302      	movs	r3, #2
 8000cac:	e002      	b.n	8000cb4 <HAL_GPIO_Init+0x1cc>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e000      	b.n	8000cb4 <HAL_GPIO_Init+0x1cc>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	2103      	movs	r1, #3
 8000cb8:	400a      	ands	r2, r1
 8000cba:	00d2      	lsls	r2, r2, #3
 8000cbc:	4093      	lsls	r3, r2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000cc4:	4936      	ldr	r1, [pc, #216]	@ (8000da0 <HAL_GPIO_Init+0x2b8>)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	089b      	lsrs	r3, r3, #2
 8000cca:	3318      	adds	r3, #24
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cd2:	4b33      	ldr	r3, [pc, #204]	@ (8000da0 <HAL_GPIO_Init+0x2b8>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	43da      	mvns	r2, r3
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685a      	ldr	r2, [r3, #4]
 8000ce6:	2380      	movs	r3, #128	@ 0x80
 8000ce8:	035b      	lsls	r3, r3, #13
 8000cea:	4013      	ands	r3, r2
 8000cec:	d003      	beq.n	8000cf6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000cf6:	4b2a      	ldr	r3, [pc, #168]	@ (8000da0 <HAL_GPIO_Init+0x2b8>)
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000cfc:	4b28      	ldr	r3, [pc, #160]	@ (8000da0 <HAL_GPIO_Init+0x2b8>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	43da      	mvns	r2, r3
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685a      	ldr	r2, [r3, #4]
 8000d10:	2380      	movs	r3, #128	@ 0x80
 8000d12:	039b      	lsls	r3, r3, #14
 8000d14:	4013      	ands	r3, r2
 8000d16:	d003      	beq.n	8000d20 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d20:	4b1f      	ldr	r3, [pc, #124]	@ (8000da0 <HAL_GPIO_Init+0x2b8>)
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d26:	4a1e      	ldr	r2, [pc, #120]	@ (8000da0 <HAL_GPIO_Init+0x2b8>)
 8000d28:	2384      	movs	r3, #132	@ 0x84
 8000d2a:	58d3      	ldr	r3, [r2, r3]
 8000d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	43da      	mvns	r2, r3
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685a      	ldr	r2, [r3, #4]
 8000d3c:	2380      	movs	r3, #128	@ 0x80
 8000d3e:	029b      	lsls	r3, r3, #10
 8000d40:	4013      	ands	r3, r2
 8000d42:	d003      	beq.n	8000d4c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d4c:	4914      	ldr	r1, [pc, #80]	@ (8000da0 <HAL_GPIO_Init+0x2b8>)
 8000d4e:	2284      	movs	r2, #132	@ 0x84
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000d54:	4a12      	ldr	r2, [pc, #72]	@ (8000da0 <HAL_GPIO_Init+0x2b8>)
 8000d56:	2380      	movs	r3, #128	@ 0x80
 8000d58:	58d3      	ldr	r3, [r2, r3]
 8000d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	43da      	mvns	r2, r3
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	4013      	ands	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	2380      	movs	r3, #128	@ 0x80
 8000d6c:	025b      	lsls	r3, r3, #9
 8000d6e:	4013      	ands	r3, r2
 8000d70:	d003      	beq.n	8000d7a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d7a:	4909      	ldr	r1, [pc, #36]	@ (8000da0 <HAL_GPIO_Init+0x2b8>)
 8000d7c:	2280      	movs	r2, #128	@ 0x80
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3301      	adds	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	40da      	lsrs	r2, r3
 8000d90:	1e13      	subs	r3, r2, #0
 8000d92:	d000      	beq.n	8000d96 <HAL_GPIO_Init+0x2ae>
 8000d94:	e6b0      	b.n	8000af8 <HAL_GPIO_Init+0x10>
  }
}
 8000d96:	46c0      	nop			@ (mov r8, r8)
 8000d98:	46c0      	nop			@ (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b006      	add	sp, #24
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40021800 	.word	0x40021800
 8000da4:	50000400 	.word	0x50000400
 8000da8:	50000800 	.word	0x50000800
 8000dac:	50000c00 	.word	0x50000c00

08000db0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000db8:	4b19      	ldr	r3, [pc, #100]	@ (8000e20 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a19      	ldr	r2, [pc, #100]	@ (8000e24 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	0019      	movs	r1, r3
 8000dc2:	4b17      	ldr	r3, [pc, #92]	@ (8000e20 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	2380      	movs	r3, #128	@ 0x80
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d11f      	bne.n	8000e14 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000dd4:	4b14      	ldr	r3, [pc, #80]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	0013      	movs	r3, r2
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	189b      	adds	r3, r3, r2
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	4912      	ldr	r1, [pc, #72]	@ (8000e2c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000de2:	0018      	movs	r0, r3
 8000de4:	f7ff f98c 	bl	8000100 <__udivsi3>
 8000de8:	0003      	movs	r3, r0
 8000dea:	3301      	adds	r3, #1
 8000dec:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000dee:	e008      	b.n	8000e02 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d003      	beq.n	8000dfe <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	e001      	b.n	8000e02 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e009      	b.n	8000e16 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e02:	4b07      	ldr	r3, [pc, #28]	@ (8000e20 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e04:	695a      	ldr	r2, [r3, #20]
 8000e06:	2380      	movs	r3, #128	@ 0x80
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	2380      	movs	r3, #128	@ 0x80
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d0ed      	beq.n	8000df0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	0018      	movs	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	b004      	add	sp, #16
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	40007000 	.word	0x40007000
 8000e24:	fffff9ff 	.word	0xfffff9ff
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	000f4240 	.word	0x000f4240

08000e30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e2f3      	b.n	800142a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2201      	movs	r2, #1
 8000e48:	4013      	ands	r3, r2
 8000e4a:	d100      	bne.n	8000e4e <HAL_RCC_OscConfig+0x1e>
 8000e4c:	e07c      	b.n	8000f48 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e4e:	4bc3      	ldr	r3, [pc, #780]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	2238      	movs	r2, #56	@ 0x38
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e58:	4bc0      	ldr	r3, [pc, #768]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	4013      	ands	r3, r2
 8000e60:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	2b10      	cmp	r3, #16
 8000e66:	d102      	bne.n	8000e6e <HAL_RCC_OscConfig+0x3e>
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d002      	beq.n	8000e74 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	2b08      	cmp	r3, #8
 8000e72:	d10b      	bne.n	8000e8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e74:	4bb9      	ldr	r3, [pc, #740]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	2380      	movs	r3, #128	@ 0x80
 8000e7a:	029b      	lsls	r3, r3, #10
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	d062      	beq.n	8000f46 <HAL_RCC_OscConfig+0x116>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d15e      	bne.n	8000f46 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e2ce      	b.n	800142a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685a      	ldr	r2, [r3, #4]
 8000e90:	2380      	movs	r3, #128	@ 0x80
 8000e92:	025b      	lsls	r3, r3, #9
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d107      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x78>
 8000e98:	4bb0      	ldr	r3, [pc, #704]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4baf      	ldr	r3, [pc, #700]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8000e9e:	2180      	movs	r1, #128	@ 0x80
 8000ea0:	0249      	lsls	r1, r1, #9
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	e020      	b.n	8000eea <HAL_RCC_OscConfig+0xba>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	23a0      	movs	r3, #160	@ 0xa0
 8000eae:	02db      	lsls	r3, r3, #11
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d10e      	bne.n	8000ed2 <HAL_RCC_OscConfig+0xa2>
 8000eb4:	4ba9      	ldr	r3, [pc, #676]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4ba8      	ldr	r3, [pc, #672]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8000eba:	2180      	movs	r1, #128	@ 0x80
 8000ebc:	02c9      	lsls	r1, r1, #11
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	4ba6      	ldr	r3, [pc, #664]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4ba5      	ldr	r3, [pc, #660]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8000ec8:	2180      	movs	r1, #128	@ 0x80
 8000eca:	0249      	lsls	r1, r1, #9
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	e00b      	b.n	8000eea <HAL_RCC_OscConfig+0xba>
 8000ed2:	4ba2      	ldr	r3, [pc, #648]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	4ba1      	ldr	r3, [pc, #644]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8000ed8:	49a1      	ldr	r1, [pc, #644]	@ (8001160 <HAL_RCC_OscConfig+0x330>)
 8000eda:	400a      	ands	r2, r1
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	4b9f      	ldr	r3, [pc, #636]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	4b9e      	ldr	r3, [pc, #632]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8000ee4:	499f      	ldr	r1, [pc, #636]	@ (8001164 <HAL_RCC_OscConfig+0x334>)
 8000ee6:	400a      	ands	r2, r1
 8000ee8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d014      	beq.n	8000f1c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef2:	f7ff fd3b 	bl	800096c <HAL_GetTick>
 8000ef6:	0003      	movs	r3, r0
 8000ef8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000efa:	e008      	b.n	8000f0e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000efc:	f7ff fd36 	bl	800096c <HAL_GetTick>
 8000f00:	0002      	movs	r2, r0
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b64      	cmp	r3, #100	@ 0x64
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e28d      	b.n	800142a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f0e:	4b93      	ldr	r3, [pc, #588]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	2380      	movs	r3, #128	@ 0x80
 8000f14:	029b      	lsls	r3, r3, #10
 8000f16:	4013      	ands	r3, r2
 8000f18:	d0f0      	beq.n	8000efc <HAL_RCC_OscConfig+0xcc>
 8000f1a:	e015      	b.n	8000f48 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f1c:	f7ff fd26 	bl	800096c <HAL_GetTick>
 8000f20:	0003      	movs	r3, r0
 8000f22:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f24:	e008      	b.n	8000f38 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f26:	f7ff fd21 	bl	800096c <HAL_GetTick>
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	2b64      	cmp	r3, #100	@ 0x64
 8000f32:	d901      	bls.n	8000f38 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e278      	b.n	800142a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f38:	4b88      	ldr	r3, [pc, #544]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	2380      	movs	r3, #128	@ 0x80
 8000f3e:	029b      	lsls	r3, r3, #10
 8000f40:	4013      	ands	r3, r2
 8000f42:	d1f0      	bne.n	8000f26 <HAL_RCC_OscConfig+0xf6>
 8000f44:	e000      	b.n	8000f48 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f46:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d100      	bne.n	8000f54 <HAL_RCC_OscConfig+0x124>
 8000f52:	e099      	b.n	8001088 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f54:	4b81      	ldr	r3, [pc, #516]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	2238      	movs	r2, #56	@ 0x38
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f5e:	4b7f      	ldr	r3, [pc, #508]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	2203      	movs	r2, #3
 8000f64:	4013      	ands	r3, r2
 8000f66:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	2b10      	cmp	r3, #16
 8000f6c:	d102      	bne.n	8000f74 <HAL_RCC_OscConfig+0x144>
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d002      	beq.n	8000f7a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d135      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f7a:	4b78      	ldr	r3, [pc, #480]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	2380      	movs	r3, #128	@ 0x80
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	4013      	ands	r3, r2
 8000f84:	d005      	beq.n	8000f92 <HAL_RCC_OscConfig+0x162>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e24b      	b.n	800142a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f92:	4b72      	ldr	r3, [pc, #456]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	4a74      	ldr	r2, [pc, #464]	@ (8001168 <HAL_RCC_OscConfig+0x338>)
 8000f98:	4013      	ands	r3, r2
 8000f9a:	0019      	movs	r1, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	021a      	lsls	r2, r3, #8
 8000fa2:	4b6e      	ldr	r3, [pc, #440]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d112      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000fae:	4b6b      	ldr	r3, [pc, #428]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a6e      	ldr	r2, [pc, #440]	@ (800116c <HAL_RCC_OscConfig+0x33c>)
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	0019      	movs	r1, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691a      	ldr	r2, [r3, #16]
 8000fbc:	4b67      	ldr	r3, [pc, #412]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000fc2:	4b66      	ldr	r3, [pc, #408]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	0adb      	lsrs	r3, r3, #11
 8000fc8:	2207      	movs	r2, #7
 8000fca:	4013      	ands	r3, r2
 8000fcc:	4a68      	ldr	r2, [pc, #416]	@ (8001170 <HAL_RCC_OscConfig+0x340>)
 8000fce:	40da      	lsrs	r2, r3
 8000fd0:	4b68      	ldr	r3, [pc, #416]	@ (8001174 <HAL_RCC_OscConfig+0x344>)
 8000fd2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000fd4:	4b68      	ldr	r3, [pc, #416]	@ (8001178 <HAL_RCC_OscConfig+0x348>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f7ff fc6b 	bl	80008b4 <HAL_InitTick>
 8000fde:	1e03      	subs	r3, r0, #0
 8000fe0:	d051      	beq.n	8001086 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e221      	b.n	800142a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d030      	beq.n	8001050 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000fee:	4b5b      	ldr	r3, [pc, #364]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a5e      	ldr	r2, [pc, #376]	@ (800116c <HAL_RCC_OscConfig+0x33c>)
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	0019      	movs	r1, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	691a      	ldr	r2, [r3, #16]
 8000ffc:	4b57      	ldr	r3, [pc, #348]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8000ffe:	430a      	orrs	r2, r1
 8001000:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001002:	4b56      	ldr	r3, [pc, #344]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	4b55      	ldr	r3, [pc, #340]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8001008:	2180      	movs	r1, #128	@ 0x80
 800100a:	0049      	lsls	r1, r1, #1
 800100c:	430a      	orrs	r2, r1
 800100e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001010:	f7ff fcac 	bl	800096c <HAL_GetTick>
 8001014:	0003      	movs	r3, r0
 8001016:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001018:	e008      	b.n	800102c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800101a:	f7ff fca7 	bl	800096c <HAL_GetTick>
 800101e:	0002      	movs	r2, r0
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e1fe      	b.n	800142a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800102c:	4b4b      	ldr	r3, [pc, #300]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	2380      	movs	r3, #128	@ 0x80
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	4013      	ands	r3, r2
 8001036:	d0f0      	beq.n	800101a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001038:	4b48      	ldr	r3, [pc, #288]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	4a4a      	ldr	r2, [pc, #296]	@ (8001168 <HAL_RCC_OscConfig+0x338>)
 800103e:	4013      	ands	r3, r2
 8001040:	0019      	movs	r1, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	021a      	lsls	r2, r3, #8
 8001048:	4b44      	ldr	r3, [pc, #272]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 800104a:	430a      	orrs	r2, r1
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	e01b      	b.n	8001088 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001050:	4b42      	ldr	r3, [pc, #264]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b41      	ldr	r3, [pc, #260]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8001056:	4949      	ldr	r1, [pc, #292]	@ (800117c <HAL_RCC_OscConfig+0x34c>)
 8001058:	400a      	ands	r2, r1
 800105a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800105c:	f7ff fc86 	bl	800096c <HAL_GetTick>
 8001060:	0003      	movs	r3, r0
 8001062:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001064:	e008      	b.n	8001078 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001066:	f7ff fc81 	bl	800096c <HAL_GetTick>
 800106a:	0002      	movs	r2, r0
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d901      	bls.n	8001078 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e1d8      	b.n	800142a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001078:	4b38      	ldr	r3, [pc, #224]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	2380      	movs	r3, #128	@ 0x80
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	4013      	ands	r3, r2
 8001082:	d1f0      	bne.n	8001066 <HAL_RCC_OscConfig+0x236>
 8001084:	e000      	b.n	8001088 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001086:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2208      	movs	r2, #8
 800108e:	4013      	ands	r3, r2
 8001090:	d047      	beq.n	8001122 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001092:	4b32      	ldr	r3, [pc, #200]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	2238      	movs	r2, #56	@ 0x38
 8001098:	4013      	ands	r3, r2
 800109a:	2b18      	cmp	r3, #24
 800109c:	d10a      	bne.n	80010b4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800109e:	4b2f      	ldr	r3, [pc, #188]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 80010a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010a2:	2202      	movs	r2, #2
 80010a4:	4013      	ands	r3, r2
 80010a6:	d03c      	beq.n	8001122 <HAL_RCC_OscConfig+0x2f2>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d138      	bne.n	8001122 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e1ba      	b.n	800142a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d019      	beq.n	80010f0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80010bc:	4b27      	ldr	r3, [pc, #156]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 80010be:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010c0:	4b26      	ldr	r3, [pc, #152]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 80010c2:	2101      	movs	r1, #1
 80010c4:	430a      	orrs	r2, r1
 80010c6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c8:	f7ff fc50 	bl	800096c <HAL_GetTick>
 80010cc:	0003      	movs	r3, r0
 80010ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010d0:	e008      	b.n	80010e4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010d2:	f7ff fc4b 	bl	800096c <HAL_GetTick>
 80010d6:	0002      	movs	r2, r0
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e1a2      	b.n	800142a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010e4:	4b1d      	ldr	r3, [pc, #116]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 80010e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010e8:	2202      	movs	r2, #2
 80010ea:	4013      	ands	r3, r2
 80010ec:	d0f1      	beq.n	80010d2 <HAL_RCC_OscConfig+0x2a2>
 80010ee:	e018      	b.n	8001122 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80010f0:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 80010f2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010f4:	4b19      	ldr	r3, [pc, #100]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 80010f6:	2101      	movs	r1, #1
 80010f8:	438a      	bics	r2, r1
 80010fa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010fc:	f7ff fc36 	bl	800096c <HAL_GetTick>
 8001100:	0003      	movs	r3, r0
 8001102:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001106:	f7ff fc31 	bl	800096c <HAL_GetTick>
 800110a:	0002      	movs	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e188      	b.n	800142a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001118:	4b10      	ldr	r3, [pc, #64]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 800111a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800111c:	2202      	movs	r2, #2
 800111e:	4013      	ands	r3, r2
 8001120:	d1f1      	bne.n	8001106 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2204      	movs	r2, #4
 8001128:	4013      	ands	r3, r2
 800112a:	d100      	bne.n	800112e <HAL_RCC_OscConfig+0x2fe>
 800112c:	e0c6      	b.n	80012bc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800112e:	231f      	movs	r3, #31
 8001130:	18fb      	adds	r3, r7, r3
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001136:	4b09      	ldr	r3, [pc, #36]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	2238      	movs	r2, #56	@ 0x38
 800113c:	4013      	ands	r3, r2
 800113e:	2b20      	cmp	r3, #32
 8001140:	d11e      	bne.n	8001180 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001142:	4b06      	ldr	r3, [pc, #24]	@ (800115c <HAL_RCC_OscConfig+0x32c>)
 8001144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001146:	2202      	movs	r2, #2
 8001148:	4013      	ands	r3, r2
 800114a:	d100      	bne.n	800114e <HAL_RCC_OscConfig+0x31e>
 800114c:	e0b6      	b.n	80012bc <HAL_RCC_OscConfig+0x48c>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d000      	beq.n	8001158 <HAL_RCC_OscConfig+0x328>
 8001156:	e0b1      	b.n	80012bc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e166      	b.n	800142a <HAL_RCC_OscConfig+0x5fa>
 800115c:	40021000 	.word	0x40021000
 8001160:	fffeffff 	.word	0xfffeffff
 8001164:	fffbffff 	.word	0xfffbffff
 8001168:	ffff80ff 	.word	0xffff80ff
 800116c:	ffffc7ff 	.word	0xffffc7ff
 8001170:	00f42400 	.word	0x00f42400
 8001174:	20000000 	.word	0x20000000
 8001178:	20000004 	.word	0x20000004
 800117c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001180:	4bac      	ldr	r3, [pc, #688]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 8001182:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001184:	2380      	movs	r3, #128	@ 0x80
 8001186:	055b      	lsls	r3, r3, #21
 8001188:	4013      	ands	r3, r2
 800118a:	d101      	bne.n	8001190 <HAL_RCC_OscConfig+0x360>
 800118c:	2301      	movs	r3, #1
 800118e:	e000      	b.n	8001192 <HAL_RCC_OscConfig+0x362>
 8001190:	2300      	movs	r3, #0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d011      	beq.n	80011ba <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	4ba7      	ldr	r3, [pc, #668]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 8001198:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800119a:	4ba6      	ldr	r3, [pc, #664]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 800119c:	2180      	movs	r1, #128	@ 0x80
 800119e:	0549      	lsls	r1, r1, #21
 80011a0:	430a      	orrs	r2, r1
 80011a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011a4:	4ba3      	ldr	r3, [pc, #652]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 80011a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011a8:	2380      	movs	r3, #128	@ 0x80
 80011aa:	055b      	lsls	r3, r3, #21
 80011ac:	4013      	ands	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80011b2:	231f      	movs	r3, #31
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	2201      	movs	r2, #1
 80011b8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011ba:	4b9f      	ldr	r3, [pc, #636]	@ (8001438 <HAL_RCC_OscConfig+0x608>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	2380      	movs	r3, #128	@ 0x80
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4013      	ands	r3, r2
 80011c4:	d11a      	bne.n	80011fc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011c6:	4b9c      	ldr	r3, [pc, #624]	@ (8001438 <HAL_RCC_OscConfig+0x608>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4b9b      	ldr	r3, [pc, #620]	@ (8001438 <HAL_RCC_OscConfig+0x608>)
 80011cc:	2180      	movs	r1, #128	@ 0x80
 80011ce:	0049      	lsls	r1, r1, #1
 80011d0:	430a      	orrs	r2, r1
 80011d2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fbca 	bl	800096c <HAL_GetTick>
 80011d8:	0003      	movs	r3, r0
 80011da:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011de:	f7ff fbc5 	bl	800096c <HAL_GetTick>
 80011e2:	0002      	movs	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e11c      	b.n	800142a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011f0:	4b91      	ldr	r3, [pc, #580]	@ (8001438 <HAL_RCC_OscConfig+0x608>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	2380      	movs	r3, #128	@ 0x80
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	4013      	ands	r3, r2
 80011fa:	d0f0      	beq.n	80011de <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d106      	bne.n	8001212 <HAL_RCC_OscConfig+0x3e2>
 8001204:	4b8b      	ldr	r3, [pc, #556]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 8001206:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001208:	4b8a      	ldr	r3, [pc, #552]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 800120a:	2101      	movs	r1, #1
 800120c:	430a      	orrs	r2, r1
 800120e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001210:	e01c      	b.n	800124c <HAL_RCC_OscConfig+0x41c>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	2b05      	cmp	r3, #5
 8001218:	d10c      	bne.n	8001234 <HAL_RCC_OscConfig+0x404>
 800121a:	4b86      	ldr	r3, [pc, #536]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 800121c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800121e:	4b85      	ldr	r3, [pc, #532]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 8001220:	2104      	movs	r1, #4
 8001222:	430a      	orrs	r2, r1
 8001224:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001226:	4b83      	ldr	r3, [pc, #524]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 8001228:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800122a:	4b82      	ldr	r3, [pc, #520]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 800122c:	2101      	movs	r1, #1
 800122e:	430a      	orrs	r2, r1
 8001230:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001232:	e00b      	b.n	800124c <HAL_RCC_OscConfig+0x41c>
 8001234:	4b7f      	ldr	r3, [pc, #508]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 8001236:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001238:	4b7e      	ldr	r3, [pc, #504]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 800123a:	2101      	movs	r1, #1
 800123c:	438a      	bics	r2, r1
 800123e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001240:	4b7c      	ldr	r3, [pc, #496]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 8001242:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001244:	4b7b      	ldr	r3, [pc, #492]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 8001246:	2104      	movs	r1, #4
 8001248:	438a      	bics	r2, r1
 800124a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d014      	beq.n	800127e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001254:	f7ff fb8a 	bl	800096c <HAL_GetTick>
 8001258:	0003      	movs	r3, r0
 800125a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800125c:	e009      	b.n	8001272 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800125e:	f7ff fb85 	bl	800096c <HAL_GetTick>
 8001262:	0002      	movs	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	4a74      	ldr	r2, [pc, #464]	@ (800143c <HAL_RCC_OscConfig+0x60c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e0db      	b.n	800142a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001272:	4b70      	ldr	r3, [pc, #448]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 8001274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001276:	2202      	movs	r2, #2
 8001278:	4013      	ands	r3, r2
 800127a:	d0f0      	beq.n	800125e <HAL_RCC_OscConfig+0x42e>
 800127c:	e013      	b.n	80012a6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127e:	f7ff fb75 	bl	800096c <HAL_GetTick>
 8001282:	0003      	movs	r3, r0
 8001284:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001286:	e009      	b.n	800129c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001288:	f7ff fb70 	bl	800096c <HAL_GetTick>
 800128c:	0002      	movs	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	4a6a      	ldr	r2, [pc, #424]	@ (800143c <HAL_RCC_OscConfig+0x60c>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e0c6      	b.n	800142a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800129c:	4b65      	ldr	r3, [pc, #404]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 800129e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012a0:	2202      	movs	r2, #2
 80012a2:	4013      	ands	r3, r2
 80012a4:	d1f0      	bne.n	8001288 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80012a6:	231f      	movs	r3, #31
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d105      	bne.n	80012bc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80012b0:	4b60      	ldr	r3, [pc, #384]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 80012b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012b4:	4b5f      	ldr	r3, [pc, #380]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 80012b6:	4962      	ldr	r1, [pc, #392]	@ (8001440 <HAL_RCC_OscConfig+0x610>)
 80012b8:	400a      	ands	r2, r1
 80012ba:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <HAL_RCC_OscConfig+0x496>
 80012c4:	e0b0      	b.n	8001428 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012c6:	4b5b      	ldr	r3, [pc, #364]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2238      	movs	r2, #56	@ 0x38
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b10      	cmp	r3, #16
 80012d0:	d100      	bne.n	80012d4 <HAL_RCC_OscConfig+0x4a4>
 80012d2:	e078      	b.n	80013c6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69db      	ldr	r3, [r3, #28]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d153      	bne.n	8001384 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012dc:	4b55      	ldr	r3, [pc, #340]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b54      	ldr	r3, [pc, #336]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 80012e2:	4958      	ldr	r1, [pc, #352]	@ (8001444 <HAL_RCC_OscConfig+0x614>)
 80012e4:	400a      	ands	r2, r1
 80012e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e8:	f7ff fb40 	bl	800096c <HAL_GetTick>
 80012ec:	0003      	movs	r3, r0
 80012ee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f2:	f7ff fb3b 	bl	800096c <HAL_GetTick>
 80012f6:	0002      	movs	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e092      	b.n	800142a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001304:	4b4b      	ldr	r3, [pc, #300]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	2380      	movs	r3, #128	@ 0x80
 800130a:	049b      	lsls	r3, r3, #18
 800130c:	4013      	ands	r3, r2
 800130e:	d1f0      	bne.n	80012f2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001310:	4b48      	ldr	r3, [pc, #288]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	4a4c      	ldr	r2, [pc, #304]	@ (8001448 <HAL_RCC_OscConfig+0x618>)
 8001316:	4013      	ands	r3, r2
 8001318:	0019      	movs	r1, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a1a      	ldr	r2, [r3, #32]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001328:	021b      	lsls	r3, r3, #8
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	431a      	orrs	r2, r3
 8001338:	4b3e      	ldr	r3, [pc, #248]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 800133a:	430a      	orrs	r2, r1
 800133c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800133e:	4b3d      	ldr	r3, [pc, #244]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b3c      	ldr	r3, [pc, #240]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 8001344:	2180      	movs	r1, #128	@ 0x80
 8001346:	0449      	lsls	r1, r1, #17
 8001348:	430a      	orrs	r2, r1
 800134a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800134c:	4b39      	ldr	r3, [pc, #228]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	4b38      	ldr	r3, [pc, #224]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 8001352:	2180      	movs	r1, #128	@ 0x80
 8001354:	0549      	lsls	r1, r1, #21
 8001356:	430a      	orrs	r2, r1
 8001358:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135a:	f7ff fb07 	bl	800096c <HAL_GetTick>
 800135e:	0003      	movs	r3, r0
 8001360:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001364:	f7ff fb02 	bl	800096c <HAL_GetTick>
 8001368:	0002      	movs	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e059      	b.n	800142a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001376:	4b2f      	ldr	r3, [pc, #188]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	2380      	movs	r3, #128	@ 0x80
 800137c:	049b      	lsls	r3, r3, #18
 800137e:	4013      	ands	r3, r2
 8001380:	d0f0      	beq.n	8001364 <HAL_RCC_OscConfig+0x534>
 8001382:	e051      	b.n	8001428 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001384:	4b2b      	ldr	r3, [pc, #172]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b2a      	ldr	r3, [pc, #168]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 800138a:	492e      	ldr	r1, [pc, #184]	@ (8001444 <HAL_RCC_OscConfig+0x614>)
 800138c:	400a      	ands	r2, r1
 800138e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001390:	f7ff faec 	bl	800096c <HAL_GetTick>
 8001394:	0003      	movs	r3, r0
 8001396:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139a:	f7ff fae7 	bl	800096c <HAL_GetTick>
 800139e:	0002      	movs	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e03e      	b.n	800142a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013ac:	4b21      	ldr	r3, [pc, #132]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	2380      	movs	r3, #128	@ 0x80
 80013b2:	049b      	lsls	r3, r3, #18
 80013b4:	4013      	ands	r3, r2
 80013b6:	d1f0      	bne.n	800139a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80013b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 80013be:	4923      	ldr	r1, [pc, #140]	@ (800144c <HAL_RCC_OscConfig+0x61c>)
 80013c0:	400a      	ands	r2, r1
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	e030      	b.n	8001428 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d101      	bne.n	80013d2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e02b      	b.n	800142a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80013d2:	4b18      	ldr	r3, [pc, #96]	@ (8001434 <HAL_RCC_OscConfig+0x604>)
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	2203      	movs	r2, #3
 80013dc:	401a      	ands	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a1b      	ldr	r3, [r3, #32]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d11e      	bne.n	8001424 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	2270      	movs	r2, #112	@ 0x70
 80013ea:	401a      	ands	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d117      	bne.n	8001424 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	23fe      	movs	r3, #254	@ 0xfe
 80013f8:	01db      	lsls	r3, r3, #7
 80013fa:	401a      	ands	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001400:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001402:	429a      	cmp	r2, r3
 8001404:	d10e      	bne.n	8001424 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	23f8      	movs	r3, #248	@ 0xf8
 800140a:	039b      	lsls	r3, r3, #14
 800140c:	401a      	ands	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001412:	429a      	cmp	r2, r3
 8001414:	d106      	bne.n	8001424 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	0f5b      	lsrs	r3, r3, #29
 800141a:	075a      	lsls	r2, r3, #29
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001420:	429a      	cmp	r2, r3
 8001422:	d001      	beq.n	8001428 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e000      	b.n	800142a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	0018      	movs	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	b008      	add	sp, #32
 8001430:	bd80      	pop	{r7, pc}
 8001432:	46c0      	nop			@ (mov r8, r8)
 8001434:	40021000 	.word	0x40021000
 8001438:	40007000 	.word	0x40007000
 800143c:	00001388 	.word	0x00001388
 8001440:	efffffff 	.word	0xefffffff
 8001444:	feffffff 	.word	0xfeffffff
 8001448:	1fc1808c 	.word	0x1fc1808c
 800144c:	effefffc 	.word	0xeffefffc

08001450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e0e9      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001464:	4b76      	ldr	r3, [pc, #472]	@ (8001640 <HAL_RCC_ClockConfig+0x1f0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2207      	movs	r2, #7
 800146a:	4013      	ands	r3, r2
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d91e      	bls.n	80014b0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001472:	4b73      	ldr	r3, [pc, #460]	@ (8001640 <HAL_RCC_ClockConfig+0x1f0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2207      	movs	r2, #7
 8001478:	4393      	bics	r3, r2
 800147a:	0019      	movs	r1, r3
 800147c:	4b70      	ldr	r3, [pc, #448]	@ (8001640 <HAL_RCC_ClockConfig+0x1f0>)
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001484:	f7ff fa72 	bl	800096c <HAL_GetTick>
 8001488:	0003      	movs	r3, r0
 800148a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800148c:	e009      	b.n	80014a2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800148e:	f7ff fa6d 	bl	800096c <HAL_GetTick>
 8001492:	0002      	movs	r2, r0
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	4a6a      	ldr	r2, [pc, #424]	@ (8001644 <HAL_RCC_ClockConfig+0x1f4>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e0ca      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014a2:	4b67      	ldr	r3, [pc, #412]	@ (8001640 <HAL_RCC_ClockConfig+0x1f0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2207      	movs	r2, #7
 80014a8:	4013      	ands	r3, r2
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d1ee      	bne.n	800148e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2202      	movs	r2, #2
 80014b6:	4013      	ands	r3, r2
 80014b8:	d015      	beq.n	80014e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2204      	movs	r2, #4
 80014c0:	4013      	ands	r3, r2
 80014c2:	d006      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80014c4:	4b60      	ldr	r3, [pc, #384]	@ (8001648 <HAL_RCC_ClockConfig+0x1f8>)
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	4b5f      	ldr	r3, [pc, #380]	@ (8001648 <HAL_RCC_ClockConfig+0x1f8>)
 80014ca:	21e0      	movs	r1, #224	@ 0xe0
 80014cc:	01c9      	lsls	r1, r1, #7
 80014ce:	430a      	orrs	r2, r1
 80014d0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d2:	4b5d      	ldr	r3, [pc, #372]	@ (8001648 <HAL_RCC_ClockConfig+0x1f8>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	4a5d      	ldr	r2, [pc, #372]	@ (800164c <HAL_RCC_ClockConfig+0x1fc>)
 80014d8:	4013      	ands	r3, r2
 80014da:	0019      	movs	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	4b59      	ldr	r3, [pc, #356]	@ (8001648 <HAL_RCC_ClockConfig+0x1f8>)
 80014e2:	430a      	orrs	r2, r1
 80014e4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2201      	movs	r2, #1
 80014ec:	4013      	ands	r3, r2
 80014ee:	d057      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d107      	bne.n	8001508 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014f8:	4b53      	ldr	r3, [pc, #332]	@ (8001648 <HAL_RCC_ClockConfig+0x1f8>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	2380      	movs	r3, #128	@ 0x80
 80014fe:	029b      	lsls	r3, r3, #10
 8001500:	4013      	ands	r3, r2
 8001502:	d12b      	bne.n	800155c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e097      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d107      	bne.n	8001520 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001510:	4b4d      	ldr	r3, [pc, #308]	@ (8001648 <HAL_RCC_ClockConfig+0x1f8>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	2380      	movs	r3, #128	@ 0x80
 8001516:	049b      	lsls	r3, r3, #18
 8001518:	4013      	ands	r3, r2
 800151a:	d11f      	bne.n	800155c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e08b      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d107      	bne.n	8001538 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001528:	4b47      	ldr	r3, [pc, #284]	@ (8001648 <HAL_RCC_ClockConfig+0x1f8>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	2380      	movs	r3, #128	@ 0x80
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4013      	ands	r3, r2
 8001532:	d113      	bne.n	800155c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e07f      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b03      	cmp	r3, #3
 800153e:	d106      	bne.n	800154e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001540:	4b41      	ldr	r3, [pc, #260]	@ (8001648 <HAL_RCC_ClockConfig+0x1f8>)
 8001542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001544:	2202      	movs	r2, #2
 8001546:	4013      	ands	r3, r2
 8001548:	d108      	bne.n	800155c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e074      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800154e:	4b3e      	ldr	r3, [pc, #248]	@ (8001648 <HAL_RCC_ClockConfig+0x1f8>)
 8001550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001552:	2202      	movs	r2, #2
 8001554:	4013      	ands	r3, r2
 8001556:	d101      	bne.n	800155c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e06d      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800155c:	4b3a      	ldr	r3, [pc, #232]	@ (8001648 <HAL_RCC_ClockConfig+0x1f8>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2207      	movs	r2, #7
 8001562:	4393      	bics	r3, r2
 8001564:	0019      	movs	r1, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	4b37      	ldr	r3, [pc, #220]	@ (8001648 <HAL_RCC_ClockConfig+0x1f8>)
 800156c:	430a      	orrs	r2, r1
 800156e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001570:	f7ff f9fc 	bl	800096c <HAL_GetTick>
 8001574:	0003      	movs	r3, r0
 8001576:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001578:	e009      	b.n	800158e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800157a:	f7ff f9f7 	bl	800096c <HAL_GetTick>
 800157e:	0002      	movs	r2, r0
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	4a2f      	ldr	r2, [pc, #188]	@ (8001644 <HAL_RCC_ClockConfig+0x1f4>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d901      	bls.n	800158e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e054      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158e:	4b2e      	ldr	r3, [pc, #184]	@ (8001648 <HAL_RCC_ClockConfig+0x1f8>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2238      	movs	r2, #56	@ 0x38
 8001594:	401a      	ands	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	429a      	cmp	r2, r3
 800159e:	d1ec      	bne.n	800157a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015a0:	4b27      	ldr	r3, [pc, #156]	@ (8001640 <HAL_RCC_ClockConfig+0x1f0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2207      	movs	r2, #7
 80015a6:	4013      	ands	r3, r2
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d21e      	bcs.n	80015ec <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ae:	4b24      	ldr	r3, [pc, #144]	@ (8001640 <HAL_RCC_ClockConfig+0x1f0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2207      	movs	r2, #7
 80015b4:	4393      	bics	r3, r2
 80015b6:	0019      	movs	r1, r3
 80015b8:	4b21      	ldr	r3, [pc, #132]	@ (8001640 <HAL_RCC_ClockConfig+0x1f0>)
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015c0:	f7ff f9d4 	bl	800096c <HAL_GetTick>
 80015c4:	0003      	movs	r3, r0
 80015c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015c8:	e009      	b.n	80015de <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ca:	f7ff f9cf 	bl	800096c <HAL_GetTick>
 80015ce:	0002      	movs	r2, r0
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001644 <HAL_RCC_ClockConfig+0x1f4>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e02c      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015de:	4b18      	ldr	r3, [pc, #96]	@ (8001640 <HAL_RCC_ClockConfig+0x1f0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2207      	movs	r2, #7
 80015e4:	4013      	ands	r3, r2
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d1ee      	bne.n	80015ca <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2204      	movs	r2, #4
 80015f2:	4013      	ands	r3, r2
 80015f4:	d009      	beq.n	800160a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80015f6:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <HAL_RCC_ClockConfig+0x1f8>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	4a15      	ldr	r2, [pc, #84]	@ (8001650 <HAL_RCC_ClockConfig+0x200>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	0019      	movs	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <HAL_RCC_ClockConfig+0x1f8>)
 8001606:	430a      	orrs	r2, r1
 8001608:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800160a:	f000 f829 	bl	8001660 <HAL_RCC_GetSysClockFreq>
 800160e:	0001      	movs	r1, r0
 8001610:	4b0d      	ldr	r3, [pc, #52]	@ (8001648 <HAL_RCC_ClockConfig+0x1f8>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	0a1b      	lsrs	r3, r3, #8
 8001616:	220f      	movs	r2, #15
 8001618:	401a      	ands	r2, r3
 800161a:	4b0e      	ldr	r3, [pc, #56]	@ (8001654 <HAL_RCC_ClockConfig+0x204>)
 800161c:	0092      	lsls	r2, r2, #2
 800161e:	58d3      	ldr	r3, [r2, r3]
 8001620:	221f      	movs	r2, #31
 8001622:	4013      	ands	r3, r2
 8001624:	000a      	movs	r2, r1
 8001626:	40da      	lsrs	r2, r3
 8001628:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <HAL_RCC_ClockConfig+0x208>)
 800162a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800162c:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <HAL_RCC_ClockConfig+0x20c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	0018      	movs	r0, r3
 8001632:	f7ff f93f 	bl	80008b4 <HAL_InitTick>
 8001636:	0003      	movs	r3, r0
}
 8001638:	0018      	movs	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	b004      	add	sp, #16
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40022000 	.word	0x40022000
 8001644:	00001388 	.word	0x00001388
 8001648:	40021000 	.word	0x40021000
 800164c:	fffff0ff 	.word	0xfffff0ff
 8001650:	ffff8fff 	.word	0xffff8fff
 8001654:	08001d20 	.word	0x08001d20
 8001658:	20000000 	.word	0x20000000
 800165c:	20000004 	.word	0x20000004

08001660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001666:	4b3c      	ldr	r3, [pc, #240]	@ (8001758 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2238      	movs	r2, #56	@ 0x38
 800166c:	4013      	ands	r3, r2
 800166e:	d10f      	bne.n	8001690 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001670:	4b39      	ldr	r3, [pc, #228]	@ (8001758 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	0adb      	lsrs	r3, r3, #11
 8001676:	2207      	movs	r2, #7
 8001678:	4013      	ands	r3, r2
 800167a:	2201      	movs	r2, #1
 800167c:	409a      	lsls	r2, r3
 800167e:	0013      	movs	r3, r2
 8001680:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001682:	6839      	ldr	r1, [r7, #0]
 8001684:	4835      	ldr	r0, [pc, #212]	@ (800175c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001686:	f7fe fd3b 	bl	8000100 <__udivsi3>
 800168a:	0003      	movs	r3, r0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	e05d      	b.n	800174c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001690:	4b31      	ldr	r3, [pc, #196]	@ (8001758 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	2238      	movs	r2, #56	@ 0x38
 8001696:	4013      	ands	r3, r2
 8001698:	2b08      	cmp	r3, #8
 800169a:	d102      	bne.n	80016a2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800169c:	4b30      	ldr	r3, [pc, #192]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x100>)
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	e054      	b.n	800174c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001758 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2238      	movs	r2, #56	@ 0x38
 80016a8:	4013      	ands	r3, r2
 80016aa:	2b10      	cmp	r3, #16
 80016ac:	d138      	bne.n	8001720 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80016ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001758 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	2203      	movs	r2, #3
 80016b4:	4013      	ands	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016b8:	4b27      	ldr	r3, [pc, #156]	@ (8001758 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	091b      	lsrs	r3, r3, #4
 80016be:	2207      	movs	r2, #7
 80016c0:	4013      	ands	r3, r2
 80016c2:	3301      	adds	r3, #1
 80016c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	d10d      	bne.n	80016e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	4824      	ldr	r0, [pc, #144]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x100>)
 80016d0:	f7fe fd16 	bl	8000100 <__udivsi3>
 80016d4:	0003      	movs	r3, r0
 80016d6:	0019      	movs	r1, r3
 80016d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001758 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	227f      	movs	r2, #127	@ 0x7f
 80016e0:	4013      	ands	r3, r2
 80016e2:	434b      	muls	r3, r1
 80016e4:	617b      	str	r3, [r7, #20]
        break;
 80016e6:	e00d      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	481c      	ldr	r0, [pc, #112]	@ (800175c <HAL_RCC_GetSysClockFreq+0xfc>)
 80016ec:	f7fe fd08 	bl	8000100 <__udivsi3>
 80016f0:	0003      	movs	r3, r0
 80016f2:	0019      	movs	r1, r3
 80016f4:	4b18      	ldr	r3, [pc, #96]	@ (8001758 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	227f      	movs	r2, #127	@ 0x7f
 80016fc:	4013      	ands	r3, r2
 80016fe:	434b      	muls	r3, r1
 8001700:	617b      	str	r3, [r7, #20]
        break;
 8001702:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001704:	4b14      	ldr	r3, [pc, #80]	@ (8001758 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	0f5b      	lsrs	r3, r3, #29
 800170a:	2207      	movs	r2, #7
 800170c:	4013      	ands	r3, r2
 800170e:	3301      	adds	r3, #1
 8001710:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	6978      	ldr	r0, [r7, #20]
 8001716:	f7fe fcf3 	bl	8000100 <__udivsi3>
 800171a:	0003      	movs	r3, r0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	e015      	b.n	800174c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001720:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2238      	movs	r2, #56	@ 0x38
 8001726:	4013      	ands	r3, r2
 8001728:	2b20      	cmp	r3, #32
 800172a:	d103      	bne.n	8001734 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800172c:	2380      	movs	r3, #128	@ 0x80
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	e00b      	b.n	800174c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001734:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2238      	movs	r2, #56	@ 0x38
 800173a:	4013      	ands	r3, r2
 800173c:	2b18      	cmp	r3, #24
 800173e:	d103      	bne.n	8001748 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001740:	23fa      	movs	r3, #250	@ 0xfa
 8001742:	01db      	lsls	r3, r3, #7
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	e001      	b.n	800174c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800174c:	693b      	ldr	r3, [r7, #16]
}
 800174e:	0018      	movs	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	b006      	add	sp, #24
 8001754:	bd80      	pop	{r7, pc}
 8001756:	46c0      	nop			@ (mov r8, r8)
 8001758:	40021000 	.word	0x40021000
 800175c:	00f42400 	.word	0x00f42400
 8001760:	007a1200 	.word	0x007a1200

08001764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e04a      	b.n	800180c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	223d      	movs	r2, #61	@ 0x3d
 800177a:	5c9b      	ldrb	r3, [r3, r2]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d107      	bne.n	8001792 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	223c      	movs	r2, #60	@ 0x3c
 8001786:	2100      	movs	r1, #0
 8001788:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	0018      	movs	r0, r3
 800178e:	f7ff f809 	bl	80007a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	223d      	movs	r2, #61	@ 0x3d
 8001796:	2102      	movs	r1, #2
 8001798:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3304      	adds	r3, #4
 80017a2:	0019      	movs	r1, r3
 80017a4:	0010      	movs	r0, r2
 80017a6:	f000 f90b 	bl	80019c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2248      	movs	r2, #72	@ 0x48
 80017ae:	2101      	movs	r1, #1
 80017b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	223e      	movs	r2, #62	@ 0x3e
 80017b6:	2101      	movs	r1, #1
 80017b8:	5499      	strb	r1, [r3, r2]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	223f      	movs	r2, #63	@ 0x3f
 80017be:	2101      	movs	r1, #1
 80017c0:	5499      	strb	r1, [r3, r2]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2240      	movs	r2, #64	@ 0x40
 80017c6:	2101      	movs	r1, #1
 80017c8:	5499      	strb	r1, [r3, r2]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2241      	movs	r2, #65	@ 0x41
 80017ce:	2101      	movs	r1, #1
 80017d0:	5499      	strb	r1, [r3, r2]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2242      	movs	r2, #66	@ 0x42
 80017d6:	2101      	movs	r1, #1
 80017d8:	5499      	strb	r1, [r3, r2]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2243      	movs	r2, #67	@ 0x43
 80017de:	2101      	movs	r1, #1
 80017e0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2244      	movs	r2, #68	@ 0x44
 80017e6:	2101      	movs	r1, #1
 80017e8:	5499      	strb	r1, [r3, r2]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2245      	movs	r2, #69	@ 0x45
 80017ee:	2101      	movs	r1, #1
 80017f0:	5499      	strb	r1, [r3, r2]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2246      	movs	r2, #70	@ 0x46
 80017f6:	2101      	movs	r1, #1
 80017f8:	5499      	strb	r1, [r3, r2]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2247      	movs	r2, #71	@ 0x47
 80017fe:	2101      	movs	r1, #1
 8001800:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	223d      	movs	r2, #61	@ 0x3d
 8001806:	2101      	movs	r1, #1
 8001808:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	0018      	movs	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	b002      	add	sp, #8
 8001812:	bd80      	pop	{r7, pc}

08001814 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800181e:	230f      	movs	r3, #15
 8001820:	18fb      	adds	r3, r7, r3
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	223c      	movs	r2, #60	@ 0x3c
 800182a:	5c9b      	ldrb	r3, [r3, r2]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d101      	bne.n	8001834 <HAL_TIM_ConfigClockSource+0x20>
 8001830:	2302      	movs	r3, #2
 8001832:	e0bc      	b.n	80019ae <HAL_TIM_ConfigClockSource+0x19a>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	223c      	movs	r2, #60	@ 0x3c
 8001838:	2101      	movs	r1, #1
 800183a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	223d      	movs	r2, #61	@ 0x3d
 8001840:	2102      	movs	r1, #2
 8001842:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	4a5a      	ldr	r2, [pc, #360]	@ (80019b8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001850:	4013      	ands	r3, r2
 8001852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	4a59      	ldr	r2, [pc, #356]	@ (80019bc <HAL_TIM_ConfigClockSource+0x1a8>)
 8001858:	4013      	ands	r3, r2
 800185a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2280      	movs	r2, #128	@ 0x80
 800186a:	0192      	lsls	r2, r2, #6
 800186c:	4293      	cmp	r3, r2
 800186e:	d040      	beq.n	80018f2 <HAL_TIM_ConfigClockSource+0xde>
 8001870:	2280      	movs	r2, #128	@ 0x80
 8001872:	0192      	lsls	r2, r2, #6
 8001874:	4293      	cmp	r3, r2
 8001876:	d900      	bls.n	800187a <HAL_TIM_ConfigClockSource+0x66>
 8001878:	e088      	b.n	800198c <HAL_TIM_ConfigClockSource+0x178>
 800187a:	2280      	movs	r2, #128	@ 0x80
 800187c:	0152      	lsls	r2, r2, #5
 800187e:	4293      	cmp	r3, r2
 8001880:	d100      	bne.n	8001884 <HAL_TIM_ConfigClockSource+0x70>
 8001882:	e088      	b.n	8001996 <HAL_TIM_ConfigClockSource+0x182>
 8001884:	2280      	movs	r2, #128	@ 0x80
 8001886:	0152      	lsls	r2, r2, #5
 8001888:	4293      	cmp	r3, r2
 800188a:	d900      	bls.n	800188e <HAL_TIM_ConfigClockSource+0x7a>
 800188c:	e07e      	b.n	800198c <HAL_TIM_ConfigClockSource+0x178>
 800188e:	2b70      	cmp	r3, #112	@ 0x70
 8001890:	d018      	beq.n	80018c4 <HAL_TIM_ConfigClockSource+0xb0>
 8001892:	d900      	bls.n	8001896 <HAL_TIM_ConfigClockSource+0x82>
 8001894:	e07a      	b.n	800198c <HAL_TIM_ConfigClockSource+0x178>
 8001896:	2b60      	cmp	r3, #96	@ 0x60
 8001898:	d04f      	beq.n	800193a <HAL_TIM_ConfigClockSource+0x126>
 800189a:	d900      	bls.n	800189e <HAL_TIM_ConfigClockSource+0x8a>
 800189c:	e076      	b.n	800198c <HAL_TIM_ConfigClockSource+0x178>
 800189e:	2b50      	cmp	r3, #80	@ 0x50
 80018a0:	d03b      	beq.n	800191a <HAL_TIM_ConfigClockSource+0x106>
 80018a2:	d900      	bls.n	80018a6 <HAL_TIM_ConfigClockSource+0x92>
 80018a4:	e072      	b.n	800198c <HAL_TIM_ConfigClockSource+0x178>
 80018a6:	2b40      	cmp	r3, #64	@ 0x40
 80018a8:	d057      	beq.n	800195a <HAL_TIM_ConfigClockSource+0x146>
 80018aa:	d900      	bls.n	80018ae <HAL_TIM_ConfigClockSource+0x9a>
 80018ac:	e06e      	b.n	800198c <HAL_TIM_ConfigClockSource+0x178>
 80018ae:	2b30      	cmp	r3, #48	@ 0x30
 80018b0:	d063      	beq.n	800197a <HAL_TIM_ConfigClockSource+0x166>
 80018b2:	d86b      	bhi.n	800198c <HAL_TIM_ConfigClockSource+0x178>
 80018b4:	2b20      	cmp	r3, #32
 80018b6:	d060      	beq.n	800197a <HAL_TIM_ConfigClockSource+0x166>
 80018b8:	d868      	bhi.n	800198c <HAL_TIM_ConfigClockSource+0x178>
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d05d      	beq.n	800197a <HAL_TIM_ConfigClockSource+0x166>
 80018be:	2b10      	cmp	r3, #16
 80018c0:	d05b      	beq.n	800197a <HAL_TIM_ConfigClockSource+0x166>
 80018c2:	e063      	b.n	800198c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80018d4:	f000 f96a 	bl	8001bac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2277      	movs	r2, #119	@ 0x77
 80018e4:	4313      	orrs	r3, r2
 80018e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	609a      	str	r2, [r3, #8]
      break;
 80018f0:	e052      	b.n	8001998 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001902:	f000 f953 	bl	8001bac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2180      	movs	r1, #128	@ 0x80
 8001912:	01c9      	lsls	r1, r1, #7
 8001914:	430a      	orrs	r2, r1
 8001916:	609a      	str	r2, [r3, #8]
      break;
 8001918:	e03e      	b.n	8001998 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001926:	001a      	movs	r2, r3
 8001928:	f000 f8c4 	bl	8001ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2150      	movs	r1, #80	@ 0x50
 8001932:	0018      	movs	r0, r3
 8001934:	f000 f91e 	bl	8001b74 <TIM_ITRx_SetConfig>
      break;
 8001938:	e02e      	b.n	8001998 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001946:	001a      	movs	r2, r3
 8001948:	f000 f8e2 	bl	8001b10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2160      	movs	r1, #96	@ 0x60
 8001952:	0018      	movs	r0, r3
 8001954:	f000 f90e 	bl	8001b74 <TIM_ITRx_SetConfig>
      break;
 8001958:	e01e      	b.n	8001998 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001966:	001a      	movs	r2, r3
 8001968:	f000 f8a4 	bl	8001ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2140      	movs	r1, #64	@ 0x40
 8001972:	0018      	movs	r0, r3
 8001974:	f000 f8fe 	bl	8001b74 <TIM_ITRx_SetConfig>
      break;
 8001978:	e00e      	b.n	8001998 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	0019      	movs	r1, r3
 8001984:	0010      	movs	r0, r2
 8001986:	f000 f8f5 	bl	8001b74 <TIM_ITRx_SetConfig>
      break;
 800198a:	e005      	b.n	8001998 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800198c:	230f      	movs	r3, #15
 800198e:	18fb      	adds	r3, r7, r3
 8001990:	2201      	movs	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]
      break;
 8001994:	e000      	b.n	8001998 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001996:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	223d      	movs	r2, #61	@ 0x3d
 800199c:	2101      	movs	r1, #1
 800199e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	223c      	movs	r2, #60	@ 0x3c
 80019a4:	2100      	movs	r1, #0
 80019a6:	5499      	strb	r1, [r3, r2]

  return status;
 80019a8:	230f      	movs	r3, #15
 80019aa:	18fb      	adds	r3, r7, r3
 80019ac:	781b      	ldrb	r3, [r3, #0]
}
 80019ae:	0018      	movs	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b004      	add	sp, #16
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	46c0      	nop			@ (mov r8, r8)
 80019b8:	ffceff88 	.word	0xffceff88
 80019bc:	ffff00ff 	.word	0xffff00ff

080019c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a32      	ldr	r2, [pc, #200]	@ (8001a9c <TIM_Base_SetConfig+0xdc>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d003      	beq.n	80019e0 <TIM_Base_SetConfig+0x20>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a31      	ldr	r2, [pc, #196]	@ (8001aa0 <TIM_Base_SetConfig+0xe0>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d108      	bne.n	80019f2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2270      	movs	r2, #112	@ 0x70
 80019e4:	4393      	bics	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a29      	ldr	r2, [pc, #164]	@ (8001a9c <TIM_Base_SetConfig+0xdc>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d00f      	beq.n	8001a1a <TIM_Base_SetConfig+0x5a>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a28      	ldr	r2, [pc, #160]	@ (8001aa0 <TIM_Base_SetConfig+0xe0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d00b      	beq.n	8001a1a <TIM_Base_SetConfig+0x5a>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a27      	ldr	r2, [pc, #156]	@ (8001aa4 <TIM_Base_SetConfig+0xe4>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d007      	beq.n	8001a1a <TIM_Base_SetConfig+0x5a>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a26      	ldr	r2, [pc, #152]	@ (8001aa8 <TIM_Base_SetConfig+0xe8>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d003      	beq.n	8001a1a <TIM_Base_SetConfig+0x5a>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a25      	ldr	r2, [pc, #148]	@ (8001aac <TIM_Base_SetConfig+0xec>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d108      	bne.n	8001a2c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	4a24      	ldr	r2, [pc, #144]	@ (8001ab0 <TIM_Base_SetConfig+0xf0>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2280      	movs	r2, #128	@ 0x80
 8001a30:	4393      	bics	r3, r2
 8001a32:	001a      	movs	r2, r3
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a11      	ldr	r2, [pc, #68]	@ (8001a9c <TIM_Base_SetConfig+0xdc>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d007      	beq.n	8001a6a <TIM_Base_SetConfig+0xaa>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a12      	ldr	r2, [pc, #72]	@ (8001aa8 <TIM_Base_SetConfig+0xe8>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d003      	beq.n	8001a6a <TIM_Base_SetConfig+0xaa>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a11      	ldr	r2, [pc, #68]	@ (8001aac <TIM_Base_SetConfig+0xec>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d103      	bne.n	8001a72 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	691a      	ldr	r2, [r3, #16]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d106      	bne.n	8001a92 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4393      	bics	r3, r2
 8001a8c:	001a      	movs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	611a      	str	r2, [r3, #16]
  }
}
 8001a92:	46c0      	nop			@ (mov r8, r8)
 8001a94:	46bd      	mov	sp, r7
 8001a96:	b004      	add	sp, #16
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			@ (mov r8, r8)
 8001a9c:	40012c00 	.word	0x40012c00
 8001aa0:	40000400 	.word	0x40000400
 8001aa4:	40002000 	.word	0x40002000
 8001aa8:	40014400 	.word	0x40014400
 8001aac:	40014800 	.word	0x40014800
 8001ab0:	fffffcff 	.word	0xfffffcff

08001ab4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	2201      	movs	r2, #1
 8001acc:	4393      	bics	r3, r2
 8001ace:	001a      	movs	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	22f0      	movs	r2, #240	@ 0xf0
 8001ade:	4393      	bics	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	011b      	lsls	r3, r3, #4
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	220a      	movs	r2, #10
 8001af0:	4393      	bics	r3, r2
 8001af2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	621a      	str	r2, [r3, #32]
}
 8001b08:	46c0      	nop			@ (mov r8, r8)
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b006      	add	sp, #24
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	2210      	movs	r2, #16
 8001b28:	4393      	bics	r3, r2
 8001b2a:	001a      	movs	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4a0d      	ldr	r2, [pc, #52]	@ (8001b70 <TIM_TI2_ConfigInputStage+0x60>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	031b      	lsls	r3, r3, #12
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	22a0      	movs	r2, #160	@ 0xa0
 8001b4c:	4393      	bics	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	621a      	str	r2, [r3, #32]
}
 8001b66:	46c0      	nop			@ (mov r8, r8)
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	b006      	add	sp, #24
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	46c0      	nop			@ (mov r8, r8)
 8001b70:	ffff0fff 	.word	0xffff0fff

08001b74 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4a08      	ldr	r2, [pc, #32]	@ (8001ba8 <TIM_ITRx_SetConfig+0x34>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	2207      	movs	r2, #7
 8001b94:	4313      	orrs	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	609a      	str	r2, [r3, #8]
}
 8001b9e:	46c0      	nop			@ (mov r8, r8)
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b004      	add	sp, #16
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	46c0      	nop			@ (mov r8, r8)
 8001ba8:	ffcfff8f 	.word	0xffcfff8f

08001bac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	4a09      	ldr	r2, [pc, #36]	@ (8001be8 <TIM_ETR_SetConfig+0x3c>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	021a      	lsls	r2, r3, #8
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	609a      	str	r2, [r3, #8]
}
 8001be0:	46c0      	nop			@ (mov r8, r8)
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b006      	add	sp, #24
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	ffff00ff 	.word	0xffff00ff

08001bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	223c      	movs	r2, #60	@ 0x3c
 8001bfa:	5c9b      	ldrb	r3, [r3, r2]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001c00:	2302      	movs	r3, #2
 8001c02:	e04a      	b.n	8001c9a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	223c      	movs	r2, #60	@ 0x3c
 8001c08:	2101      	movs	r1, #1
 8001c0a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	223d      	movs	r2, #61	@ 0x3d
 8001c10:	2102      	movs	r1, #2
 8001c12:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a1e      	ldr	r2, [pc, #120]	@ (8001ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d108      	bne.n	8001c40 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2270      	movs	r2, #112	@ 0x70
 8001c44:	4393      	bics	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a11      	ldr	r2, [pc, #68]	@ (8001ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d004      	beq.n	8001c6e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a10      	ldr	r2, [pc, #64]	@ (8001cac <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d10c      	bne.n	8001c88 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	2280      	movs	r2, #128	@ 0x80
 8001c72:	4393      	bics	r3, r2
 8001c74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	223d      	movs	r2, #61	@ 0x3d
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	223c      	movs	r2, #60	@ 0x3c
 8001c94:	2100      	movs	r1, #0
 8001c96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	b004      	add	sp, #16
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	40012c00 	.word	0x40012c00
 8001ca8:	ff0fffff 	.word	0xff0fffff
 8001cac:	40000400 	.word	0x40000400

08001cb0 <memset>:
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	1882      	adds	r2, r0, r2
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d100      	bne.n	8001cba <memset+0xa>
 8001cb8:	4770      	bx	lr
 8001cba:	7019      	strb	r1, [r3, #0]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	e7f9      	b.n	8001cb4 <memset+0x4>

08001cc0 <__libc_init_array>:
 8001cc0:	b570      	push	{r4, r5, r6, lr}
 8001cc2:	2600      	movs	r6, #0
 8001cc4:	4c0c      	ldr	r4, [pc, #48]	@ (8001cf8 <__libc_init_array+0x38>)
 8001cc6:	4d0d      	ldr	r5, [pc, #52]	@ (8001cfc <__libc_init_array+0x3c>)
 8001cc8:	1b64      	subs	r4, r4, r5
 8001cca:	10a4      	asrs	r4, r4, #2
 8001ccc:	42a6      	cmp	r6, r4
 8001cce:	d109      	bne.n	8001ce4 <__libc_init_array+0x24>
 8001cd0:	2600      	movs	r6, #0
 8001cd2:	f000 f819 	bl	8001d08 <_init>
 8001cd6:	4c0a      	ldr	r4, [pc, #40]	@ (8001d00 <__libc_init_array+0x40>)
 8001cd8:	4d0a      	ldr	r5, [pc, #40]	@ (8001d04 <__libc_init_array+0x44>)
 8001cda:	1b64      	subs	r4, r4, r5
 8001cdc:	10a4      	asrs	r4, r4, #2
 8001cde:	42a6      	cmp	r6, r4
 8001ce0:	d105      	bne.n	8001cee <__libc_init_array+0x2e>
 8001ce2:	bd70      	pop	{r4, r5, r6, pc}
 8001ce4:	00b3      	lsls	r3, r6, #2
 8001ce6:	58eb      	ldr	r3, [r5, r3]
 8001ce8:	4798      	blx	r3
 8001cea:	3601      	adds	r6, #1
 8001cec:	e7ee      	b.n	8001ccc <__libc_init_array+0xc>
 8001cee:	00b3      	lsls	r3, r6, #2
 8001cf0:	58eb      	ldr	r3, [r5, r3]
 8001cf2:	4798      	blx	r3
 8001cf4:	3601      	adds	r6, #1
 8001cf6:	e7f2      	b.n	8001cde <__libc_init_array+0x1e>
 8001cf8:	08001d60 	.word	0x08001d60
 8001cfc:	08001d60 	.word	0x08001d60
 8001d00:	08001d64 	.word	0x08001d64
 8001d04:	08001d60 	.word	0x08001d60

08001d08 <_init>:
 8001d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d0a:	46c0      	nop			@ (mov r8, r8)
 8001d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d0e:	bc08      	pop	{r3}
 8001d10:	469e      	mov	lr, r3
 8001d12:	4770      	bx	lr

08001d14 <_fini>:
 8001d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d16:	46c0      	nop			@ (mov r8, r8)
 8001d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d1a:	bc08      	pop	{r3}
 8001d1c:	469e      	mov	lr, r3
 8001d1e:	4770      	bx	lr
